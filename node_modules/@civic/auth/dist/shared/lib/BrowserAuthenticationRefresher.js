import { AUTOREFRESH_TIMEOUT_NAME, REFRESH_IN_PROGRESS } from "../../constants.js";
import { retrieveOidcSessionExpiredAt } from "../../shared/lib/util.js";
import { AuthenticationRefresherImpl } from "./AuthenticationRefresherImpl.js";
import { UserStorage } from "./types.js";
export class BrowserAuthenticationRefresher extends AuthenticationRefresherImpl {
    refreshEventCallbacks;
    static async build(authConfig, storage, onError, endpointOverrides, refreshEventCallbacks) {
        const refresher = new BrowserAuthenticationRefresher(authConfig, storage, onError, endpointOverrides);
        refresher.refreshEventCallbacks = refreshEventCallbacks;
        await refresher.init();
        return refresher;
    }
    handleError(error) {
        console.error("BrowserAuthenticationRefresher: Error", error);
        this.clearAutorefresh();
        this.onError(error);
    }
    async handleAutoRefresh() {
        try {
            const existingUser = await this.storage?.get(UserStorage.USER);
            if (!existingUser) {
                console.warn("BrowserAuthenticationRefresher: No user found, skipping refresh");
                this.clearAutorefresh();
                return;
            }
            // ensure only one refresh is in progress
            if (localStorage.getItem(REFRESH_IN_PROGRESS) !== "true") {
                localStorage.setItem(REFRESH_IN_PROGRESS, "true");
                // Call onRefreshStarted callback
                this.refreshEventCallbacks?.onRefreshStarted?.();
                await this.refreshTokens();
                // Call onRefreshComplete callback
                this.refreshEventCallbacks?.onRefreshComplete?.();
                await this.setupAutorefresh(); // Reset the timeout after successful refresh
            }
        }
        catch (error) {
            console.error("BrowserAuthenticationRefresher: Failed to refresh tokens:", error);
            // Call onRefreshError callback
            this.refreshEventCallbacks?.onRefreshError?.(error);
            // TODO detect if refresh token has expired and if yes then logout
            this.handleError(error);
        }
    }
    async setupAutorefresh() {
        // clear any existing state
        localStorage.removeItem(REFRESH_IN_PROGRESS);
        if (!this.storage)
            throw new Error("No storage available");
        // Clear any existing timeout
        this.clearAutorefresh();
        // get expires_in
        const now = Math.floor(Date.now() / 1000);
        const expiresAt = await retrieveOidcSessionExpiredAt(this.storage);
        // If there's no expiration time, don't set up auto-refresh
        if (!expiresAt) {
            console.warn("BrowserAuthenticationRefresher: No OIDC_SESSION_EXPIRES_AT found, skipping auto-refresh setup");
            return;
        }
        // Calculate time until expiry (subtract 30 seconds as buffer)
        const bufferTime = 30; // 30 seconds
        const refreshTime = Math.max(0, expiresAt - bufferTime - now); // handle case were token has expired in the past
        const refreshTimeout = setTimeout(() => {
            this.handleAutoRefresh();
        }, 1000 * refreshTime);
        localStorage.setItem(AUTOREFRESH_TIMEOUT_NAME, refreshTimeout.toString());
    }
    clearAutorefresh() {
        // use local storage to store the timeout id so that if multiple instances
        // of the refresher are created they can all clear the same timeout
        const existingTimeout = localStorage.getItem(AUTOREFRESH_TIMEOUT_NAME);
        if (existingTimeout) {
            clearTimeout(Number(existingTimeout));
            localStorage.removeItem(AUTOREFRESH_TIMEOUT_NAME);
        }
    }
}
//# sourceMappingURL=BrowserAuthenticationRefresher.js.map
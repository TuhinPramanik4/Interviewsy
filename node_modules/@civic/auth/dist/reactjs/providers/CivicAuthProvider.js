"use client";
import { Fragment as _Fragment, jsx as _jsx } from "@emotion/react/jsx-runtime";
import React, { useEffect } from "react";
import { GlobalAuthManager, } from "../core/GlobalAuthManager.js";
const CivicAuthProvider = ({ children, clientId, redirectUrl, config, scopes, displayMode = "iframe", iframeMode = "modal", onSignIn, onSignOut, nonce, logoutRedirectUrl, authProcessTimeout, }) => {
    // Initialize GlobalAuthManager with the provider config
    useEffect(() => {
        const globalConfig = {
            clientId,
            redirectUrl,
            config: {
                oauthServer: config?.oauthServer,
            },
            scopes,
            displayMode,
            iframeMode,
            nonce,
            logoutRedirectUrl,
            authProcessTimeout,
            onSignIn,
            onSignOut,
        };
        const manager = GlobalAuthManager.getInstance();
        const initializeAuth = async () => {
            try {
                await manager.initialize(globalConfig);
            }
            catch (error) {
                console.error("Failed to initialize auth in CivicAuthProvider:", error);
            }
        };
        initializeAuth();
    }, [
        clientId,
        redirectUrl,
        config?.oauthServer,
        scopes,
        displayMode,
        iframeMode,
        nonce,
        logoutRedirectUrl,
        authProcessTimeout,
        onSignIn,
        onSignOut,
    ]);
    // Just render children - no context provider needed
    return _jsx(_Fragment, { children: children });
};
export { CivicAuthProvider };
//# sourceMappingURL=CivicAuthProvider.js.map
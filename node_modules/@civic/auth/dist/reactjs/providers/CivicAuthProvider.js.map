{"version":3,"file":"CivicAuthProvider.js","sourceRoot":"","sources":["../../../src/reactjs/providers/CivicAuthProvider.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AACb,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AACzC,OAAO,EACL,iBAAiB,GAElB,MAAM,8BAA8B,CAAC;AAoBtC,MAAM,iBAAiB,GAAqC,CAAC,EAC3D,QAAQ,EACR,QAAQ,EACR,WAAW,EACX,MAAM,EACN,MAAM,EACN,WAAW,GAAG,QAAQ,EACtB,UAAU,GAAG,OAAO,EACpB,QAAQ,EACR,SAAS,EACT,KAAK,EACL,iBAAiB,EACjB,kBAAkB,GACnB,EAAE,EAAE;IACH,wDAAwD;IACxD,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,YAAY,GAAqB;YACrC,QAAQ;YACR,WAAW;YACX,MAAM,EAAE;gBACN,WAAW,EAAE,MAAM,EAAE,WAAW;aACjC;YACD,MAAM;YACN,WAAW;YACX,UAAU;YACV,KAAK;YACL,iBAAiB;YACjB,kBAAkB;YAClB,QAAQ;YACR,SAAS;SACV,CAAC;QAEF,MAAM,OAAO,GAAG,iBAAiB,CAAC,WAAW,EAAE,CAAC;QAEhD,MAAM,cAAc,GAAG,KAAK,IAAI,EAAE;YAChC,IAAI,CAAC;gBACH,MAAM,OAAO,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;YACzC,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,iDAAiD,EAAE,KAAK,CAAC,CAAC;YAC1E,CAAC;QACH,CAAC,CAAC;QAEF,cAAc,EAAE,CAAC;IACnB,CAAC,EAAE;QACD,QAAQ;QACR,WAAW;QACX,MAAM,EAAE,WAAW;QACnB,MAAM;QACN,WAAW;QACX,UAAU;QACV,KAAK;QACL,iBAAiB;QACjB,kBAAkB;QAClB,QAAQ;QACR,SAAS;KACV,CAAC,CAAC;IAEH,oDAAoD;IACpD,OAAO,4BAAG,QAAQ,GAAI,CAAC;AACzB,CAAC,CAAC;AAEF,OAAO,EAAE,iBAAiB,EAAE,CAAC","sourcesContent":["\"use client\";\nimport React, { useEffect } from \"react\";\nimport {\n  GlobalAuthManager,\n  type GlobalAuthConfig,\n} from \"../core/GlobalAuthManager.js\";\nimport type { DisplayMode } from \"@/types.js\";\n\nexport interface CivicAuthProviderProps {\n  children: React.ReactNode;\n  clientId: string;\n  redirectUrl?: string;\n  config?: {\n    oauthServer?: string;\n  };\n  scopes?: string[];\n  displayMode?: DisplayMode;\n  iframeMode?: \"modal\" | \"embedded\";\n  onSignIn?: (error?: Error) => void;\n  onSignOut?: () => void;\n  nonce?: string;\n  logoutRedirectUrl?: string;\n  authProcessTimeout?: number;\n}\n\nconst CivicAuthProvider: React.FC<CivicAuthProviderProps> = ({\n  children,\n  clientId,\n  redirectUrl,\n  config,\n  scopes,\n  displayMode = \"iframe\",\n  iframeMode = \"modal\",\n  onSignIn,\n  onSignOut,\n  nonce,\n  logoutRedirectUrl,\n  authProcessTimeout,\n}) => {\n  // Initialize GlobalAuthManager with the provider config\n  useEffect(() => {\n    const globalConfig: GlobalAuthConfig = {\n      clientId,\n      redirectUrl,\n      config: {\n        oauthServer: config?.oauthServer,\n      },\n      scopes,\n      displayMode,\n      iframeMode,\n      nonce,\n      logoutRedirectUrl,\n      authProcessTimeout,\n      onSignIn,\n      onSignOut,\n    };\n\n    const manager = GlobalAuthManager.getInstance();\n\n    const initializeAuth = async () => {\n      try {\n        await manager.initialize(globalConfig);\n      } catch (error) {\n        console.error(\"Failed to initialize auth in CivicAuthProvider:\", error);\n      }\n    };\n\n    initializeAuth();\n  }, [\n    clientId,\n    redirectUrl,\n    config?.oauthServer,\n    scopes,\n    displayMode,\n    iframeMode,\n    nonce,\n    logoutRedirectUrl,\n    authProcessTimeout,\n    onSignIn,\n    onSignOut,\n  ]);\n\n  // Just render children - no context provider needed\n  return <>{children}</>;\n};\n\nexport { CivicAuthProvider };\n"]}
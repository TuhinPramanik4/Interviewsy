{"version":3,"file":"GlobalAuthManager.js","sourceRoot":"","sources":["../../../src/reactjs/core/GlobalAuthManager.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * GlobalAuthManager - Singleton Authentication State Manager\n *\n * This module provides a global singleton that manages authentication state across a React application\n * without requiring React Context providers or prop drilling. It acts as a centralized authentication\n * manager that wraps the CivicAuth vanilla JavaScript library and provides a React-friendly interface.\n *\n * Key Features:\n * - Singleton pattern ensures single auth instance across the entire app\n * - Eliminates need for React Context providers and reduces bundle size\n * - Manages authentication state (user, session, loading, errors)\n * - Handles sign-in/sign-out flows with event-driven updates\n * - Provides idempotent initialization (safe to call multiple times)\n * - Supports multiple React hooks subscribing to the same auth state\n * - Automatic session refresh and user data synchronization\n *\n * Usage:\n * - Initialize once in your app with authentication configuration\n * - Use React hooks (useCivicAuth, useAuth, etc.) to access auth state\n * - The manager handles all underlying CivicAuth SDK interactions\n * - State updates are automatically propagated to all subscribed components\n *\n * This design pattern is particularly useful for:\n * - Large applications with many components needing auth state\n * - Avoiding provider wrapper hell in React component trees\n * - Ensuring consistent auth state across disconnected component hierarchies\n * - Server-side rendering scenarios where providers might be problematic\n */\n\nimport {\n  CivicAuth,\n  AuthenticationEvents,\n  AuthEvent,\n} from \"../../vanillajs/index.js\";\nimport type {\n  User,\n  Session,\n  CivicAuthClientConfig,\n} from \"../../vanillajs/index.js\";\nimport type { DisplayMode } from \"../../types.js\";\n\n// Event payload interfaces\ninterface SignInErrorEvent {\n  detail: string;\n}\n\nexport interface GlobalAuthConfig {\n  clientId: string;\n  redirectUrl?: string;\n  config?: {\n    oauthServer?: string;\n  };\n  displayMode?: DisplayMode;\n  iframeMode?: \"modal\" | \"embedded\";\n  nonce?: string;\n  logoutRedirectUrl?: string;\n  scopes?: string[];\n  authProcessTimeout?: number;\n  onSignIn?: (error?: Error) => void;\n  onSignOut?: () => void;\n}\n\nexport type AuthStatus =\n  | \"authenticated\"\n  | \"unauthenticated\"\n  | \"authenticating\"\n  | \"error\"\n  | \"signing_out\";\n\nexport interface GlobalAuthState {\n  user: User | null;\n  session: Session | null;\n  isLoading: boolean;\n  authStatus: AuthStatus;\n  error: Error | null;\n  displayMode?: DisplayMode;\n}\n\ntype StateListener = (state: GlobalAuthState) => void;\n\n/**\n * Global singleton that manages CivicAuth instance for React hooks\n * Eliminates the need for React providers\n */\nclass GlobalAuthManager {\n  private static instance: GlobalAuthManager | null = null;\n  private auth: CivicAuth | null = null;\n  private events: AuthenticationEvents | null = null;\n  private config: GlobalAuthConfig | null = null;\n  private listeners = new Set<StateListener>();\n  private callbacks: {\n    onSignIn?: (error?: Error) => void;\n    onSignOut?: () => void;\n  } = {};\n  private initializationPromise: Promise<void> | null = null;\n\n  private state: GlobalAuthState = {\n    user: null,\n    session: null,\n    isLoading: false,\n    authStatus: \"unauthenticated\",\n    error: null,\n    displayMode: undefined,\n  };\n\n  private constructor() {\n    // Private constructor for singleton\n  }\n\n  static getInstance(): GlobalAuthManager {\n    if (!GlobalAuthManager.instance) {\n      GlobalAuthManager.instance = new GlobalAuthManager();\n    }\n    return GlobalAuthManager.instance;\n  }\n\n  /**\n   * Initialize auth with config (idempotent)\n   * Returns the same promise for concurrent calls with same config\n   */\n  async initialize(config: GlobalAuthConfig): Promise<void> {\n    // If we have a promise and same config, return existing promise\n    if (\n      this.initializationPromise &&\n      this.config &&\n      this.isSameConfig(config)\n    ) {\n      return this.initializationPromise;\n    }\n\n    // If different config, reset everything\n    if (this.config && !this.isSameConfig(config)) {\n      this.initializationPromise = null;\n      await this.cleanup();\n    }\n\n    // Create new initialization promise if needed\n    if (!this.initializationPromise) {\n      this.initializationPromise = this._doInitialize(config);\n    }\n\n    return this.initializationPromise;\n  }\n\n  /**\n   * Private method that does the actual initialization work\n   */\n  private async _doInitialize(config: GlobalAuthConfig): Promise<void> {\n    this.config = config;\n    this.callbacks = {\n      onSignIn: config.onSignIn,\n      onSignOut: config.onSignOut,\n    };\n    this.setState({ isLoading: true, error: null });\n\n    try {\n      this.events = new AuthenticationEvents();\n      this.setupEventListeners();\n\n      const authConfig: CivicAuthClientConfig = {\n        clientId: config.clientId,\n        oauthServerBaseUrl: config.config?.oauthServer,\n        scopes: config.scopes || [\n          \"openid\",\n          \"profile\",\n          \"email\",\n          \"offline_access\",\n        ],\n        displayMode: config.displayMode || \"iframe\",\n        iframeDisplayMode: config.iframeMode || \"modal\",\n        nonce: config.nonce,\n        authProcessTimeout: config.authProcessTimeout || 120000,\n        events: this.events,\n        logging: {\n          enabled: true,\n          level: \"debug\" as const,\n        },\n      };\n\n      // Only add redirectUrl if provided\n      if (config.redirectUrl) {\n        authConfig.redirectUrl = config.redirectUrl;\n      }\n\n      // Only add logoutRedirectUrl if provided\n      if (config.logoutRedirectUrl) {\n        authConfig.logoutRedirectUrl = config.logoutRedirectUrl;\n      }\n\n      this.auth = await CivicAuth.create(authConfig);\n\n      // Check initial auth state\n      const isAuthenticated = await this.auth.isAuthenticated();\n      if (isAuthenticated) {\n        await this.refreshUserAndSession();\n        this.setState({ authStatus: \"authenticated\" });\n      } else {\n        this.setState({ authStatus: \"unauthenticated\" });\n      }\n\n      this.setState({\n        isLoading: false,\n        displayMode: config.displayMode,\n      });\n    } catch (error) {\n      // Reset promise on error so it can be retried\n      this.initializationPromise = null;\n\n      const authError =\n        error instanceof Error\n          ? error\n          : new Error(\"Auth initialization failed\");\n      this.setState({\n        error: authError,\n        authStatus: \"error\",\n        isLoading: false,\n      });\n      throw authError;\n    }\n  }\n\n  /**\n   * Subscribe to state changes\n   */\n  subscribe(listener: StateListener): () => void {\n    this.listeners.add(listener);\n    return () => this.listeners.delete(listener);\n  }\n\n  /**\n   * Get current state\n   */\n  getState(): GlobalAuthState {\n    return { ...this.state };\n  }\n\n  /**\n   * Sign in\n   */\n  async signIn(): Promise<{ user: User }> {\n    if (!this.auth) {\n      throw new Error(\"Auth not initialized\");\n    }\n\n    const { user } = await this.auth.startAuthentication();\n    await this.refreshUserAndSession();\n\n    // Ensure we have a user to return\n    if (!user) {\n      throw new Error(\"Authentication succeeded but no user was returned\");\n    }\n\n    // Return the user object\n    return { user };\n  }\n\n  /**\n   * Sign out\n   */\n  async signOut(): Promise<void> {\n    if (!this.auth) {\n      throw new Error(\"Auth not initialized\");\n    }\n\n    await this.auth.logout();\n    this.setState({\n      user: null,\n      session: null,\n      authStatus: \"unauthenticated\",\n    });\n  }\n\n  /**\n   * Check if config is the same (for idempotent initialization)\n   */\n  private isSameConfig(newConfig: GlobalAuthConfig): boolean {\n    if (!this.config) return false;\n    return (\n      this.config.clientId === newConfig.clientId &&\n      this.config.config?.oauthServer === newConfig.config?.oauthServer &&\n      this.config.displayMode === newConfig.displayMode &&\n      this.config.nonce === newConfig.nonce\n    );\n  }\n\n  /**\n   * Setup event listeners for auth state changes\n   */\n  private setupEventListeners(): void {\n    if (!this.events) return;\n\n    this.events.on(AuthEvent.SIGN_IN_STARTED, () => {\n      this.setState({\n        isLoading: true,\n        authStatus: \"authenticating\",\n        error: null,\n      });\n    });\n\n    this.events.on(AuthEvent.SIGN_IN_COMPLETE, () => {\n      this.setState({\n        isLoading: false,\n        authStatus: \"authenticated\",\n        error: null,\n      });\n      this.refreshUserAndSession();\n      this.callbacks.onSignIn?.();\n    });\n\n    this.events.on(AuthEvent.SIGN_IN_ERROR, (event?: SignInErrorEvent) => {\n      const errorDetail = event?.detail || \"Authentication failed\";\n      const authError = new Error(errorDetail);\n      this.setState({\n        isLoading: false,\n        authStatus: \"error\",\n        error: authError,\n      });\n      this.callbacks.onSignIn?.(authError);\n    });\n\n    this.events.on(AuthEvent.SIGN_OUT_STARTED, () => {\n      this.setState({\n        isLoading: true,\n        authStatus: \"signing_out\",\n        error: null,\n      });\n    });\n\n    this.events.on(AuthEvent.SIGN_OUT_COMPLETE, () => {\n      this.setState({\n        isLoading: false,\n        authStatus: \"unauthenticated\",\n        user: null,\n        session: null,\n        error: null,\n      });\n      this.callbacks.onSignOut?.();\n    });\n\n    this.events.on(AuthEvent.USER_SESSION_CHANGED, () => {\n      this.refreshUserAndSession();\n    });\n  }\n\n  /**\n   * Refresh user and session data\n   */\n  private async refreshUserAndSession(): Promise<void> {\n    if (!this.auth) return;\n\n    try {\n      const [session, user] = await Promise.all([\n        this.auth.getCurrentSession(),\n        this.auth.getCurrentUser(),\n      ]);\n\n      this.setState({ session, user });\n    } catch (error) {\n      const sessionError =\n        error instanceof Error ? error : new Error(\"Failed to get session\");\n      this.setState({ error: sessionError });\n    }\n  }\n\n  /**\n   * Update state and notify listeners\n   */\n  private setState(updates: Partial<GlobalAuthState>): void {\n    this.state = { ...this.state, ...updates };\n    this.listeners.forEach((listener) => listener(this.state));\n  }\n\n  /**\n   * Cleanup auth instance\n   */\n  private async cleanup(): Promise<void> {\n    if (this.auth) {\n      await this.auth.destroy();\n      this.auth = null;\n    }\n    this.events = null;\n    this.config = null;\n    this.initializationPromise = null; // Reset promise for clean re-initialization\n  }\n}\n\nexport { GlobalAuthManager };\n"]}
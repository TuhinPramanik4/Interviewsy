/**
 * GlobalAuthManager - Singleton Authentication State Manager
 *
 * This module provides a global singleton that manages authentication state across a React application
 * without requiring React Context providers or prop drilling. It acts as a centralized authentication
 * manager that wraps the CivicAuth vanilla JavaScript library and provides a React-friendly interface.
 *
 * Key Features:
 * - Singleton pattern ensures single auth instance across the entire app
 * - Eliminates need for React Context providers and reduces bundle size
 * - Manages authentication state (user, session, loading, errors)
 * - Handles sign-in/sign-out flows with event-driven updates
 * - Provides idempotent initialization (safe to call multiple times)
 * - Supports multiple React hooks subscribing to the same auth state
 * - Automatic session refresh and user data synchronization
 *
 * Usage:
 * - Initialize once in your app with authentication configuration
 * - Use React hooks (useCivicAuth, useAuth, etc.) to access auth state
 * - The manager handles all underlying CivicAuth SDK interactions
 * - State updates are automatically propagated to all subscribed components
 *
 * This design pattern is particularly useful for:
 * - Large applications with many components needing auth state
 * - Avoiding provider wrapper hell in React component trees
 * - Ensuring consistent auth state across disconnected component hierarchies
 * - Server-side rendering scenarios where providers might be problematic
 */
import type { User, Session } from "../../vanillajs/index.js";
import type { DisplayMode } from "../../types.js";
export interface GlobalAuthConfig {
    clientId: string;
    redirectUrl?: string;
    config?: {
        oauthServer?: string;
    };
    displayMode?: DisplayMode;
    iframeMode?: "modal" | "embedded";
    nonce?: string;
    logoutRedirectUrl?: string;
    scopes?: string[];
    authProcessTimeout?: number;
    onSignIn?: (error?: Error) => void;
    onSignOut?: () => void;
}
export type AuthStatus = "authenticated" | "unauthenticated" | "authenticating" | "error" | "signing_out";
export interface GlobalAuthState {
    user: User | null;
    session: Session | null;
    isLoading: boolean;
    authStatus: AuthStatus;
    error: Error | null;
    displayMode?: DisplayMode;
}
type StateListener = (state: GlobalAuthState) => void;
/**
 * Global singleton that manages CivicAuth instance for React hooks
 * Eliminates the need for React providers
 */
declare class GlobalAuthManager {
    private static instance;
    private auth;
    private events;
    private config;
    private listeners;
    private callbacks;
    private initializationPromise;
    private state;
    private constructor();
    static getInstance(): GlobalAuthManager;
    /**
     * Initialize auth with config (idempotent)
     * Returns the same promise for concurrent calls with same config
     */
    initialize(config: GlobalAuthConfig): Promise<void>;
    /**
     * Private method that does the actual initialization work
     */
    private _doInitialize;
    /**
     * Subscribe to state changes
     */
    subscribe(listener: StateListener): () => void;
    /**
     * Get current state
     */
    getState(): GlobalAuthState;
    /**
     * Sign in
     */
    signIn(): Promise<{
        user: User;
    }>;
    /**
     * Sign out
     */
    signOut(): Promise<void>;
    /**
     * Check if config is the same (for idempotent initialization)
     */
    private isSameConfig;
    /**
     * Setup event listeners for auth state changes
     */
    private setupEventListeners;
    /**
     * Refresh user and session data
     */
    private refreshUserAndSession;
    /**
     * Update state and notify listeners
     */
    private setState;
    /**
     * Cleanup auth instance
     */
    private cleanup;
}
export { GlobalAuthManager };
//# sourceMappingURL=GlobalAuthManager.d.ts.map
{"version":3,"file":"SignInButton.js","sourceRoot":"","sources":["../../../src/reactjs/components/SignInButton.tsx"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAsB,MAAM,OAAO,CAAC;AAChE,OAAO,EAAE,UAAU,EAAoB,MAAM,YAAY,CAAC;AAC1D,OAAO,EAAE,OAAO,EAAE,MAAM,4BAA4B,CAAC;AACrD,OAAO,EAAE,qBAAqB,EAAE,MAAM,4BAA4B,CAAC;AACnE,OAAO,EAAE,gBAAgB,EAAE,MAAM,YAAY,CAAC;AAE9C,MAAM,YAAY,GAAG,CAAC,EACpB,WAAW,EACX,SAAS,EACT,KAAK,GAKN,EAAE,EAAE;IACH,MAAM,EACJ,MAAM,EACN,UAAU,EACV,WAAW,EAAE,eAAe,EAC5B,SAAS,GACV,GAAG,OAAO,EAAE,CAAC;IACd,MAAM,CAAC,iBAAiB,EAAE,oBAAoB,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;IAElE,mEAAmE;IACnE,SAAS,CAAC,GAAG,EAAE;QACb,IACE,CAAC,UAAU,CAAC,aAAa,EAAE,UAAU,CAAC,eAAe,CAAC,CAAC,QAAQ,CAC7D,UAAU,CACX,EACD,CAAC;YACD,oBAAoB,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;IAEjB,oDAAoD;IACpD,MAAM,oBAAoB,GAAG,WAAW,IAAI,eAAe,IAAI,QAAQ,CAAC;IAExE,OAAO,CACL,gCACc,gBAAgB,EAC5B,GAAG,EAAE;YACH,YAAY,EAAE,QAAQ;YACtB,MAAM,EAAE,mBAAmB;YAC3B,OAAO,EAAE,cAAc;YACvB,UAAU,EAAE,uBAAuB;YACnC,QAAQ,EAAE,KAAK,EAAE,kEAAkE;SACpF,EACD,SAAS,EAAE,SAAS,EACpB,KAAK,EAAE,KAAK,EACZ,OAAO,EAAE,GAAG,EAAE;YACZ,oBAAoB,CAAC,IAAI,CAAC,CAAC;YAC3B,CAAC,gBAAgB,CAAC,UAAU,EAAE,oBAAoB,CAAC;gBACjD,CAAC,SAAS;gBACV,MAAM,EAAE,CAAC;QACb,CAAC,YAED,KAAC,qBAAqB,IACpB,UAAU,EAAE,UAAU,EACtB,WAAW,EAAE,oBAAoB,EACjC,iBAAiB,EAAE,iBAAiB,wBAGd,GACjB,CACV,CAAC;AACJ,CAAC,CAAC;AAEF,OAAO,EAAE,YAAY,EAAE,CAAC","sourcesContent":["\"use client\";\n\nimport { useEffect, useState, type CSSProperties } from \"react\";\nimport { AuthStatus, type DisplayMode } from \"@/types.js\";\nimport { useUser } from \"@/reactjs/hooks/useUser.js\";\nimport { ButtonContentOrLoader } from \"./ButtonContentOrLoader.js\";\nimport { shouldShowLoader } from \"./utils.js\";\n\nconst SignInButton = ({\n  displayMode,\n  className,\n  style,\n}: {\n  displayMode?: DisplayMode;\n  className?: string;\n  style?: CSSProperties;\n}) => {\n  const {\n    signIn,\n    authStatus,\n    displayMode: userDisplayMode,\n    isLoading,\n  } = useUser();\n  const [userActionStarted, setUserActionStarted] = useState(false);\n\n  // reset the userActionStarted state if the user logs out or aborts\n  useEffect(() => {\n    if (\n      [AuthStatus.AUTHENTICATED, AuthStatus.UNAUTHENTICATED].includes(\n        authStatus,\n      )\n    ) {\n      setUserActionStarted(false);\n    }\n  }, [authStatus]);\n\n  // Provide default displayMode if both are undefined\n  const effectiveDisplayMode = displayMode || userDisplayMode || \"iframe\";\n\n  return (\n    <button\n      data-testid=\"sign-in-button\"\n      css={{\n        borderRadius: \"9999px\",\n        border: \"1px solid #6b7280\",\n        padding: \"0.75rem 1rem\",\n        transition: \"background-color 0.2s\",\n        minWidth: \"9em\", // this stops the button from going too small when in loading mode\n      }}\n      className={className}\n      style={style}\n      onClick={() => {\n        setUserActionStarted(true);\n        !shouldShowLoader(authStatus, effectiveDisplayMode) &&\n          !isLoading &&\n          signIn();\n      }}\n    >\n      <ButtonContentOrLoader\n        authStatus={authStatus}\n        displayMode={effectiveDisplayMode}\n        userActionStarted={userActionStarted}\n      >\n        Sign In\n      </ButtonContentOrLoader>\n    </button>\n  );\n};\n\nexport { SignInButton };\n"]}
{"version":3,"file":"useUser.js","sourceRoot":"","sources":["../../../src/reactjs/hooks/useUser.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * useUser Hook\n *\n * A comprehensive user session hook that provides full user data including profile information,\n * authentication tokens, and authentication state. Supports generic typing for custom user data.\n *\n * Use this hook when you:\n * - Need access to user profile information (user object)\n * - Need authentication tokens (JWT, access, refresh tokens)\n * - Are working with custom user data types\n * - Need comprehensive user session data\n * - Want backward compatibility with legacy UserContext\n *\n * This hook supports two authentication patterns with automatic fallback:\n * 1. Provider-based (legacy): Uses CivicAuthProvider or CivicNextAuthProvider\n * 2. Provider-free (modern): Direct configuration via useUser(config)\n *\n * Usage Examples:\n *\n * // With provider (existing approach - NextJS/React providers)\n * <CivicAuthProvider clientId=\"...\" config={{ oauthServer: \"...\" }}>\n *   const { user, isLoading, signIn } = useUser();\n * </CivicAuthProvider>\n *\n * // Without provider (new approach) - direct configuration\n * const { user, authStatus, signOut } = useUser({\n *   clientId: \"your-client-id\",\n *   config: { oauthServer: \"https://auth.civic.com/oauth/\" },\n *   displayMode: \"iframe\", // or \"redirect\", \"popup\", etc.\n *   scopes: [\"openid\", \"profile\", \"email\"],\n *   onSignIn: (error) => console.log(\"Sign in completed\", error),\n *   onSignOut: () => console.log(\"Sign out completed\")\n * });\n *\n * // Generic typing for custom user data\n * interface CustomUser { customField: string; }\n * const { user } = useUser<CustomUser>(); // user will be User<CustomUser> | null\n */\n\"use client\";\nimport { useContext, useState, useEffect, useCallback, useMemo } from \"react\";\nimport { UserContext } from \"../../shared/providers/UserProvider.js\";\nimport type { User, ForwardedTokens } from \"../../types.js\";\nimport type { AuthStatus } from \"../../types.js\";\nimport type { DisplayMode } from \"../../types.js\";\nimport {\n  GlobalAuthManager,\n  type GlobalAuthConfig,\n  type GlobalAuthState,\n} from \"../core/GlobalAuthManager.js\";\nimport { extractTokensFromSession } from \"../../vanillajs/utils/auth-utils.js\";\n\nexport interface UserContextType<\n  T extends Record<string, unknown> = Record<string, never>,\n> {\n  user: User<T> | null;\n  idToken?: string | null;\n  accessToken?: string | null;\n  refreshToken?: string | null;\n  forwardedTokens?: ForwardedTokens;\n  isLoading: boolean;\n  authStatus: AuthStatus;\n  error: Error | null;\n  signIn: () => Promise<{ user: User<T> }>;\n  signOut: () => Promise<void>;\n  displayMode?: DisplayMode;\n}\n\nconst useUser = <T extends Record<string, unknown> = Record<string, never>>(\n  config?: GlobalAuthConfig,\n): UserContextType<T> => {\n  // Always call context hooks unconditionally (rules of hooks)\n  const sharedContext = useContext(UserContext);\n\n  // State for global manager approach\n  const [globalState, setGlobalState] = useState<GlobalAuthState | null>(null);\n\n  // Determine which approach to use\n  const hasProviderContext = sharedContext;\n  const shouldUseGlobal = !hasProviderContext;\n\n  // Initialize global manager if no provider context\n  useEffect(() => {\n    if (!shouldUseGlobal) return;\n\n    const manager = GlobalAuthManager.getInstance();\n\n    // If config is provided, initialize with it\n    if (config) {\n      const initializeAuth = async () => {\n        try {\n          await manager.initialize(config);\n        } catch (error) {\n          console.error(\"Failed to initialize auth:\", error);\n        }\n      };\n      initializeAuth();\n    }\n\n    // Subscribe to state changes\n    const unsubscribe = manager.subscribe((newState) => {\n      setGlobalState(newState);\n    });\n\n    // Get current state\n    setGlobalState(manager.getState());\n\n    return unsubscribe;\n  }, [shouldUseGlobal, config]);\n\n  // Global manager sign in/out functions\n  const globalSignIn = useCallback(async () => {\n    const manager = GlobalAuthManager.getInstance();\n    await manager.signIn();\n\n    // Get the user after sign in\n    const state = manager.getState();\n    if (!state.user) {\n      throw new Error(\"Authentication succeeded but no user was returned\");\n    }\n\n    return { user: state.user as User<T> };\n  }, []);\n\n  const globalSignOut = useCallback(async () => {\n    const manager = GlobalAuthManager.getInstance();\n    await manager.signOut();\n  }, []);\n\n  // Extract tokens from global state\n  const globalTokens = useMemo(() => {\n    return extractTokensFromSession(globalState?.session || null);\n  }, [globalState?.session]);\n\n  // Create wrapper functions for different signIn signatures\n  const wrapSharedSignIn = useCallback(async (): Promise<{ user: User<T> }> => {\n    if (sharedContext) {\n      await sharedContext.signIn(); // This returns void\n      // Get user from context after sign in\n      if (sharedContext.user) {\n        return { user: sharedContext.user as User<T> };\n      }\n\n      // We don't return a user yet in nextjs until the next refactor\n      return { user: null as unknown as User<T> };\n    }\n    throw new Error(\"Shared context not available\");\n  }, [sharedContext]);\n\n  // ========================================================================\n  // FALLBACK PRIORITY SYSTEM - Two authentication context approaches\n  // ========================================================================\n\n  // 1. DEPRECATED UserContext (ACTIVE - Used by NextJS)\n  // Framework-agnostic shared context from UserProvider\n  // Location: shared/providers/UserProvider.tsx\n  // Usage: NextJS example uses CivicNextAuthProvider → UserProvider → UserContext\n  if (sharedContext) {\n    return {\n      user: sharedContext.user as User<T> | null,\n      idToken: sharedContext.idToken,\n      accessToken: sharedContext.accessToken,\n      refreshToken: undefined, // Not available in shared context\n      forwardedTokens: sharedContext.forwardedTokens,\n      isLoading: sharedContext.isLoading,\n      authStatus: sharedContext.authStatus,\n      error: sharedContext.error,\n      signIn: wrapSharedSignIn,\n      signOut: sharedContext.signOut,\n      displayMode: sharedContext.displayMode,\n    };\n  }\n\n  // 2. GlobalAuthManager (MODERN - Provider-free approach)\n  // Singleton-based state management, eliminates need for React providers\n  // Location: reactjs/core/GlobalAuthManager.ts\n  // Usage: React example uses CivicAuthProvider → GlobalAuthManager internally\n  // Can also be used directly: useUser({ clientId: \"...\", config: {...} })\n  if (globalState) {\n    return {\n      user: globalState.user as User<T> | null,\n      idToken: globalTokens.idToken,\n      accessToken: globalTokens.accessToken,\n      refreshToken: globalTokens.refreshToken,\n      forwardedTokens: globalTokens.forwardedTokens,\n      isLoading: globalState.isLoading,\n      authStatus: globalState.authStatus as AuthStatus,\n      error: globalState.error,\n      signIn: globalSignIn,\n      signOut: globalSignOut,\n      displayMode: globalState.displayMode,\n    };\n  }\n\n  // If no context and no global state, provide default loading state\n  // This happens when CivicAuthProvider is present but GlobalAuthManager hasn't initialized yet\n  return {\n    user: null,\n    idToken: null,\n    accessToken: null,\n    refreshToken: null,\n    forwardedTokens: undefined,\n    isLoading: true,\n    authStatus: \"unauthenticated\" as AuthStatus,\n    error: null,\n    signIn: globalSignIn,\n    signOut: globalSignOut,\n    displayMode: config?.displayMode,\n  };\n};\n\nexport { useUser };\n"]}
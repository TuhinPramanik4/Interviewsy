import type { User, ForwardedTokens } from "../../types.js";
import type { AuthStatus } from "../../types.js";
import type { DisplayMode } from "../../types.js";
import { type GlobalAuthConfig } from "../core/GlobalAuthManager.js";
export interface UserContextType<T extends Record<string, unknown> = Record<string, never>> {
    user: User<T> | null;
    idToken?: string | null;
    accessToken?: string | null;
    refreshToken?: string | null;
    forwardedTokens?: ForwardedTokens;
    isLoading: boolean;
    authStatus: AuthStatus;
    error: Error | null;
    signIn: () => Promise<{
        user: User<T>;
    }>;
    signOut: () => Promise<void>;
    displayMode?: DisplayMode;
}
declare const useUser: <T extends Record<string, unknown> = Record<string, never>>(config?: GlobalAuthConfig) => UserContextType<T>;
export { useUser };
//# sourceMappingURL=useUser.d.ts.map
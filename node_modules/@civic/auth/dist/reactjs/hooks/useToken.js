/**
 * useToken Hook
 *
 * A backwards-compatible token hook that extracts token-related properties from useUser.
 * This hook provides access to authentication tokens without user profile information.
 *
 * Use this hook when you:
 * - Only need access to tokens (idToken, accessToken, refreshToken, forwardedTokens)
 * - Want to maintain backwards compatibility with existing code
 * - Don't need user profile information
 *
 * This hook supports the same authentication patterns as useUser with automatic fallback:
 * 1. Provider-based (legacy): Uses CivicAuthProvider or CivicNextAuthProvider
 * 2. Provider-free (modern): Direct configuration via useToken(config)
 *
 * Usage Examples:
 *
 * // With provider (existing approach)
 * <CivicAuthProvider clientId="..." config={{ oauthServer: "..." }}>
 *   const { accessToken, idToken, forwardedTokens } = useToken();
 * </CivicAuthProvider>
 *
 * // Without provider (new approach) - direct configuration
 * const { accessToken, idToken, refreshToken } = useToken({
 *   clientId: "your-client-id",
 *   config: { oauthServer: "https://auth.civic.com/oauth/" },
 *   displayMode: "iframe",
 *   scopes: ["openid", "profile", "email"]
 * });
 */
"use client";
import { useMemo } from "react";
import { useUser } from "./useUser.js";
const useToken = (config) => {
    // Leverage the existing useUser hook which handles all the fallback logic
    const { idToken, accessToken, refreshToken, forwardedTokens, isLoading, error, } = useUser(config);
    // Return only token-related properties for backwards compatibility
    return useMemo(() => ({
        idToken,
        accessToken,
        refreshToken,
        forwardedTokens,
        isLoading,
        error,
    }), [idToken, accessToken, refreshToken, forwardedTokens, isLoading, error]);
};
export { useToken };
//# sourceMappingURL=useToken.js.map
import { v4 as uuid } from "uuid";
const getIssuerVariations = (issuer) => {
    const issuerWithoutSlash = issuer.endsWith("/")
        ? issuer.slice(0, issuer.length - 1)
        : issuer;
    const issuerWithSlash = `${issuerWithoutSlash}/`;
    return [issuerWithoutSlash, issuerWithSlash];
};
const addSlashIfNeeded = (url) => url.endsWith("/") ? url : `${url}/`;
const cache = {};
const getOauthEndpoints = async (oauthServer) => {
    if (cache[oauthServer]) {
        return cache[oauthServer];
    }
    const openIdConfigResponse = await fetch(`${addSlashIfNeeded(oauthServer)}.well-known/openid-configuration`);
    const openIdConfig = (await openIdConfigResponse.json());
    const endpoints = {
        jwks: openIdConfig.jwks_uri,
        auth: openIdConfig.authorization_endpoint,
        token: openIdConfig.token_endpoint,
        userinfo: openIdConfig.userinfo_endpoint,
        endsession: openIdConfig.end_session_endpoint,
    };
    cache[oauthServer] = endpoints;
    return endpoints;
};
const generateState = ({ displayMode, serverTokenExchange, loginSuccessUrl, }) => {
    const jsonString = JSON.stringify({
        uuid: uuid(),
        displayMode,
        ...(serverTokenExchange ? { serverTokenExchange } : {}),
        ...(loginSuccessUrl ? { loginSuccessUrl } : {}),
    });
    return btoa(jsonString);
};
/**
 * parses the state string from the OAuth2 flow, decoding the display mode too
 * @param state
 * @param sessionDisplayMode
 * @returns { uuid: string, displayMode: DisplayMode }
 */
const displayModeFromState = (state, sessionDisplayMode) => {
    try {
        const jsonString = atob(state);
        return JSON.parse(jsonString).displayMode;
    }
    catch (e) {
        console.error("Failed to parse displayMode from state:", state, e);
        return sessionDisplayMode;
    }
};
const decodeState = (state) => {
    try {
        const jsonString = atob(state);
        return JSON.parse(jsonString);
    }
    catch {
        console.error("Failed to parse state string to json:", state);
        return undefined;
    }
};
const serverTokenExchangeFromState = (state) => decodeState(state)?.serverTokenExchange;
const loginSuccessUrlFromState = (state) => state ? decodeState(state)?.loginSuccessUrl : undefined;
export { serverTokenExchangeFromState, loginSuccessUrlFromState, getIssuerVariations, getOauthEndpoints, displayModeFromState, generateState, };
//# sourceMappingURL=oauth.js.map
import { decodeJwt } from "jose";
import { convertForwardedTokenFormat } from "../../lib/jwt.js";
export function buildAuthUrl({ endpoints, clientId, redirectUrl, scopes, codeChallenge, state, prompt, nonce, }) {
    const authUrl = new URL(endpoints.auth);
    authUrl.searchParams.append("client_id", clientId);
    authUrl.searchParams.append("redirect_uri", redirectUrl);
    authUrl.searchParams.append("response_type", "code");
    authUrl.searchParams.append("scope", scopes.join(" "));
    authUrl.searchParams.append("state", state);
    authUrl.searchParams.append("code_challenge", codeChallenge);
    authUrl.searchParams.append("code_challenge_method", "S256");
    // Required by the auth server for offline_access scope
    authUrl.searchParams.append("prompt", prompt || "consent");
    if (nonce) {
        // nonce isn't supported by oslo, so we add it manually
        authUrl.searchParams.append("nonce", nonce);
    }
    return authUrl.toString();
}
/**
 * Extracts all tokens including decoded forwarded tokens from a session
 * This utility handles JWT decoding and token format conversion at the vanilla JS layer
 * making it available to both vanilla JS and React consumers
 */
export function extractTokensFromSession(session) {
    if (!session) {
        return {
            idToken: null,
            accessToken: null,
            refreshToken: null,
            forwardedTokens: undefined,
        };
    }
    const { idToken, accessToken, refreshToken } = session;
    // Extract forwardedTokens from ID token (only if idToken exists)
    const forwardedTokens = idToken
        ? (() => {
            try {
                const { forwardedTokens: jwtForwardedTokens } = decodeJwt(idToken);
                if (!jwtForwardedTokens)
                    return undefined;
                return convertForwardedTokenFormat(jwtForwardedTokens);
            }
            catch (err) {
                console.warn("Failed to decode forwarded tokens from ID token:", err);
                return undefined;
            }
        })()
        : undefined;
    return {
        idToken: idToken || null,
        accessToken: accessToken || null,
        refreshToken: refreshToken || null,
        forwardedTokens,
    };
}
//# sourceMappingURL=auth-utils.js.map
{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../../src/vanillajs/utils/logger.ts"],"names":[],"mappings":"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","sourcesContent":["import debug from \"debug\";\n\n// Type for the extended configureLogging function\ninterface ConfigureLoggingFunction {\n  (config: {\n    enabled: boolean;\n    namespace?: string;\n    level?: \"debug\" | \"info\" | \"warn\" | \"error\";\n  }): void;\n  originalLog: ((...args: unknown[]) => void) | null;\n}\n\n// Global variable to store the current namespace base\nlet currentNamespaceBase: string = \"vanillajs\";\n\n// Helper function to create a logger with a specific namespace\nexport const createLogger = (subNamespace: string) => {\n  // Create hierarchical namespace: civic:auth:{main}:{sub}\n  const fullNamespace = `civic:auth:${currentNamespaceBase}:${subNamespace}`;\n  const logger = debug(fullNamespace);\n  return {\n    debug: (message: string, ...args: unknown[]) => logger(message, ...args),\n    info: (message: string, ...args: unknown[]) => logger(message, ...args),\n    warn: (message: string, ...args: unknown[]) => logger(message, ...args),\n    error: (message: string, ...args: unknown[]) => logger(message, ...args),\n  };\n};\n\n// Helper function to create the main logger (for CivicAuth class)\nexport const createMainLogger = (namespace: string = \"vanillajs\") => {\n  currentNamespaceBase = namespace;\n  const logger = debug(`civic:auth:${namespace}`);\n  return {\n    debug: (message: string, ...args: unknown[]) => logger(message, ...args),\n    info: (message: string, ...args: unknown[]) => logger(message, ...args),\n    warn: (message: string, ...args: unknown[]) => logger(message, ...args),\n    error: (message: string, ...args: unknown[]) => logger(message, ...args),\n  };\n};\n\n// Function to configure logging based on config\nexport const configureLogging: ConfigureLoggingFunction = (config: {\n  enabled: boolean;\n  namespace?: string;\n  level?: \"debug\" | \"info\" | \"warn\" | \"error\";\n}) => {\n  if (typeof window === \"undefined\") return;\n\n  // Store the original debug.log function if not already stored\n  if (!configureLogging.originalLog) {\n    configureLogging.originalLog = debug.log;\n  }\n\n  if (config.enabled) {\n    // DO NOT update currentNamespaceBase - it should always stay \"vanillajs\"\n    // The namespace property is ONLY for filtering, not for setting the base namespace\n\n    // Enable namespace pattern - if namespace provided, enable that namespace and all its sub-namespaces\n    const namespacePattern =\n      config.namespace && config.namespace !== \"*\"\n        ? `civic:auth:vanillajs:${config.namespace}*` // Filter to specific sub-namespace\n        : \"civic:auth:vanillajs*\"; // Enable all vanillajs namespaces\n\n    debug.enable(namespacePattern);\n\n    // Override debug's default log function to ensure it works in the browser\n    debug.log = (...args: unknown[]) => {\n      if (typeof console !== \"undefined\") {\n        console.log(...args);\n      }\n      if (configureLogging.originalLog) {\n        configureLogging.originalLog.apply(debug, args);\n      }\n    };\n  } else {\n    // Disable all debug logs\n    debug.disable();\n\n    // Restore the original debug.log function to prevent any logs from showing\n    if (configureLogging.originalLog) {\n      debug.log = configureLogging.originalLog;\n    }\n  }\n};\n\n// Store the original debug.log function as a property of configureLogging\nconfigureLogging.originalLog = null;\n\n// Global variable to store the current logger instance\nlet currentLogger: ReturnType<typeof createLogger> | null = null;\n\n// Function to set the current logger instance\nexport const setCurrentLogger = (logger: ReturnType<typeof createLogger>) => {\n  currentLogger = logger;\n};\n\n// Function to get the current logger instance\nexport const getCurrentLogger = () => {\n  if (!currentLogger) {\n    // Create a default logger if none is set\n    currentLogger = createLogger(\"default\");\n  }\n  return currentLogger;\n};\n"]}
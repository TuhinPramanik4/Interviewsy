import debug from "debug";
// Global variable to store the current namespace base
let currentNamespaceBase = "vanillajs";
// Helper function to create a logger with a specific namespace
export const createLogger = (subNamespace) => {
    // Create hierarchical namespace: civic:auth:{main}:{sub}
    const fullNamespace = `civic:auth:${currentNamespaceBase}:${subNamespace}`;
    const logger = debug(fullNamespace);
    return {
        debug: (message, ...args) => logger(message, ...args),
        info: (message, ...args) => logger(message, ...args),
        warn: (message, ...args) => logger(message, ...args),
        error: (message, ...args) => logger(message, ...args),
    };
};
// Helper function to create the main logger (for CivicAuth class)
export const createMainLogger = (namespace = "vanillajs") => {
    currentNamespaceBase = namespace;
    const logger = debug(`civic:auth:${namespace}`);
    return {
        debug: (message, ...args) => logger(message, ...args),
        info: (message, ...args) => logger(message, ...args),
        warn: (message, ...args) => logger(message, ...args),
        error: (message, ...args) => logger(message, ...args),
    };
};
// Function to configure logging based on config
export const configureLogging = (config) => {
    if (typeof window === "undefined")
        return;
    // Store the original debug.log function if not already stored
    if (!configureLogging.originalLog) {
        configureLogging.originalLog = debug.log;
    }
    if (config.enabled) {
        // DO NOT update currentNamespaceBase - it should always stay "vanillajs"
        // The namespace property is ONLY for filtering, not for setting the base namespace
        // Enable namespace pattern - if namespace provided, enable that namespace and all its sub-namespaces
        const namespacePattern = config.namespace && config.namespace !== "*"
            ? `civic:auth:vanillajs:${config.namespace}*` // Filter to specific sub-namespace
            : "civic:auth:vanillajs*"; // Enable all vanillajs namespaces
        debug.enable(namespacePattern);
        // Override debug's default log function to ensure it works in the browser
        debug.log = (...args) => {
            if (typeof console !== "undefined") {
                console.log(...args);
            }
            if (configureLogging.originalLog) {
                configureLogging.originalLog.apply(debug, args);
            }
        };
    }
    else {
        // Disable all debug logs
        debug.disable();
        // Restore the original debug.log function to prevent any logs from showing
        if (configureLogging.originalLog) {
            debug.log = configureLogging.originalLog;
        }
    }
};
// Store the original debug.log function as a property of configureLogging
configureLogging.originalLog = null;
// Global variable to store the current logger instance
let currentLogger = null;
// Function to set the current logger instance
export const setCurrentLogger = (logger) => {
    currentLogger = logger;
};
// Function to get the current logger instance
export const getCurrentLogger = () => {
    if (!currentLogger) {
        // Create a default logger if none is set
        currentLogger = createLogger("default");
    }
    return currentLogger;
};
//# sourceMappingURL=logger.js.map
interface ConfigureLoggingFunction {
    (config: {
        enabled: boolean;
        namespace?: string;
        level?: "debug" | "info" | "warn" | "error";
    }): void;
    originalLog: ((...args: unknown[]) => void) | null;
}
export declare const createLogger: (subNamespace: string) => {
    debug: (message: string, ...args: unknown[]) => void;
    info: (message: string, ...args: unknown[]) => void;
    warn: (message: string, ...args: unknown[]) => void;
    error: (message: string, ...args: unknown[]) => void;
};
export declare const createMainLogger: (namespace?: string) => {
    debug: (message: string, ...args: unknown[]) => void;
    info: (message: string, ...args: unknown[]) => void;
    warn: (message: string, ...args: unknown[]) => void;
    error: (message: string, ...args: unknown[]) => void;
};
export declare const configureLogging: ConfigureLoggingFunction;
export declare const setCurrentLogger: (logger: ReturnType<typeof createLogger>) => void;
export declare const getCurrentLogger: () => {
    debug: (message: string, ...args: unknown[]) => void;
    info: (message: string, ...args: unknown[]) => void;
    warn: (message: string, ...args: unknown[]) => void;
    error: (message: string, ...args: unknown[]) => void;
};
export {};
//# sourceMappingURL=logger.d.ts.map
{"version":3,"file":"ApiService.js","sourceRoot":"","sources":["../../../src/vanillajs/services/ApiService.ts"],"names":[],"mappings":"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","sourcesContent":["import { createLogger } from \"../utils/logger.js\";\n\nexport interface RequestOptions<TBody extends BodyInit | null = BodyInit | null>\n  extends Omit<RequestInit, \"body\"> {\n  baseUrl?: string;\n  params?: Record<string, string>;\n  body?: TBody; // Generic type for request body\n  token?: string; // Optional bearer token\n}\n\n/**\n * ApiService is a wrapper around the fetch API for making HTTP requests.\n * It can be configured with a base URL and default headers.\n */\nexport class ApiService {\n  private logger = createLogger(\"api\");\n  private defaultConfig: Omit<RequestOptions, \"body\" | \"params\">;\n\n  constructor(defaultConfig: Omit<RequestOptions, \"body\" | \"params\"> = {}) {\n    this.defaultConfig = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        ...defaultConfig.headers,\n      },\n      ...defaultConfig,\n    };\n  }\n\n  async request<TResponse, TBody extends BodyInit | null = BodyInit | null>(\n    url: string,\n    options: RequestOptions<TBody> = {},\n  ): Promise<TResponse> {\n    const { baseUrl, params, token, ...fetchOptions } = options;\n\n    // Construct full URL\n    let fullUrl = baseUrl ? `${baseUrl}${url}` : url;\n    if (params) {\n      const searchParams = new URLSearchParams();\n      Object.entries(params).forEach(([key, value]) => {\n        searchParams.append(key, value);\n      });\n      fullUrl += `?${searchParams.toString()}`;\n    }\n\n    // Add authorization header if token is provided\n    if (token) {\n      fetchOptions.headers = {\n        ...fetchOptions.headers,\n        Authorization: `Bearer ${token}`,\n      };\n    }\n\n    // Stringify body if it's an object\n    if (\n      fetchOptions.body &&\n      typeof fetchOptions.body === \"object\" &&\n      !(fetchOptions.body instanceof FormData)\n    ) {\n      fetchOptions.body = JSON.stringify(fetchOptions.body) as TBody;\n      fetchOptions.headers = {\n        ...fetchOptions.headers,\n        \"Content-Type\": \"application/json\",\n      };\n    }\n\n    try {\n      this.logger.debug(\"Making API request\", {\n        url: fullUrl,\n        options: fetchOptions,\n      });\n      const response = await fetch(fullUrl, fetchOptions as RequestInit);\n\n      if (!response.ok) {\n        const error = new Error(`HTTP error! status: ${response.status}`);\n        this.logger.error(\"API request failed\", { error, response });\n        throw error;\n      }\n\n      const data = await response.json();\n      this.logger.debug(\"API request successful\", { data });\n      return data as TResponse;\n    } catch (error) {\n      this.logger.error(\"API request failed\", { error, url: fullUrl });\n      throw error;\n    }\n  }\n\n  get<TResponse>(\n    url: string,\n    options: Omit<RequestOptions<never>, \"method\" | \"body\"> = {},\n  ): Promise<TResponse> {\n    return this.request<TResponse>(url, { ...options, method: \"GET\" });\n  }\n\n  post<TResponse, TBody extends BodyInit | null = BodyInit | null>(\n    url: string,\n    options: Omit<RequestOptions<TBody>, \"method\"> = {},\n  ): Promise<TResponse> {\n    return this.request<TResponse, TBody>(url, { ...options, method: \"POST\" });\n  }\n\n  put<TResponse, TBody extends BodyInit | null = BodyInit | null>(\n    url: string,\n    options: Omit<RequestOptions<TBody>, \"method\"> = {},\n  ): Promise<TResponse> {\n    return this.request<TResponse, TBody>(url, { ...options, method: \"PUT\" });\n  }\n\n  delete<TResponse>(\n    url: string,\n    options: Omit<RequestOptions<never>, \"method\" | \"body\"> = {},\n  ): Promise<TResponse> {\n    return this.request<TResponse>(url, { ...options, method: \"DELETE\" });\n  }\n\n  patch<TResponse, TBody extends BodyInit | null = BodyInit | null>(\n    url: string,\n    options: Omit<RequestOptions<TBody>, \"method\"> = {},\n  ): Promise<TResponse> {\n    return this.request<TResponse, TBody>(url, { ...options, method: \"PATCH\" });\n  }\n}\n"]}
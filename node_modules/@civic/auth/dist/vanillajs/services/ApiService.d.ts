export interface RequestOptions<TBody extends BodyInit | null = BodyInit | null> extends Omit<RequestInit, "body"> {
    baseUrl?: string;
    params?: Record<string, string>;
    body?: TBody;
    token?: string;
}
/**
 * ApiService is a wrapper around the fetch API for making HTTP requests.
 * It can be configured with a base URL and default headers.
 */
export declare class ApiService {
    private logger;
    private defaultConfig;
    constructor(defaultConfig?: Omit<RequestOptions, "body" | "params">);
    request<TResponse, TBody extends BodyInit | null = BodyInit | null>(url: string, options?: RequestOptions<TBody>): Promise<TResponse>;
    get<TResponse>(url: string, options?: Omit<RequestOptions<never>, "method" | "body">): Promise<TResponse>;
    post<TResponse, TBody extends BodyInit | null = BodyInit | null>(url: string, options?: Omit<RequestOptions<TBody>, "method">): Promise<TResponse>;
    put<TResponse, TBody extends BodyInit | null = BodyInit | null>(url: string, options?: Omit<RequestOptions<TBody>, "method">): Promise<TResponse>;
    delete<TResponse>(url: string, options?: Omit<RequestOptions<never>, "method" | "body">): Promise<TResponse>;
    patch<TResponse, TBody extends BodyInit | null = BodyInit | null>(url: string, options?: Omit<RequestOptions<TBody>, "method">): Promise<TResponse>;
}
//# sourceMappingURL=ApiService.d.ts.map
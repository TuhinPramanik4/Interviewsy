import { createLogger } from "../utils/logger.js";
/**
 * ApiService is a wrapper around the fetch API for making HTTP requests.
 * It can be configured with a base URL and default headers.
 */
export class ApiService {
    logger = createLogger("api");
    defaultConfig;
    constructor(defaultConfig = {}) {
        this.defaultConfig = {
            headers: {
                "Content-Type": "application/json",
                ...defaultConfig.headers,
            },
            ...defaultConfig,
        };
    }
    async request(url, options = {}) {
        const { baseUrl, params, token, ...fetchOptions } = options;
        // Construct full URL
        let fullUrl = baseUrl ? `${baseUrl}${url}` : url;
        if (params) {
            const searchParams = new URLSearchParams();
            Object.entries(params).forEach(([key, value]) => {
                searchParams.append(key, value);
            });
            fullUrl += `?${searchParams.toString()}`;
        }
        // Add authorization header if token is provided
        if (token) {
            fetchOptions.headers = {
                ...fetchOptions.headers,
                Authorization: `Bearer ${token}`,
            };
        }
        // Stringify body if it's an object
        if (fetchOptions.body &&
            typeof fetchOptions.body === "object" &&
            !(fetchOptions.body instanceof FormData)) {
            fetchOptions.body = JSON.stringify(fetchOptions.body);
            fetchOptions.headers = {
                ...fetchOptions.headers,
                "Content-Type": "application/json",
            };
        }
        try {
            this.logger.debug("Making API request", {
                url: fullUrl,
                options: fetchOptions,
            });
            const response = await fetch(fullUrl, fetchOptions);
            if (!response.ok) {
                const error = new Error(`HTTP error! status: ${response.status}`);
                this.logger.error("API request failed", { error, response });
                throw error;
            }
            const data = await response.json();
            this.logger.debug("API request successful", { data });
            return data;
        }
        catch (error) {
            this.logger.error("API request failed", { error, url: fullUrl });
            throw error;
        }
    }
    get(url, options = {}) {
        return this.request(url, { ...options, method: "GET" });
    }
    post(url, options = {}) {
        return this.request(url, { ...options, method: "POST" });
    }
    put(url, options = {}) {
        return this.request(url, { ...options, method: "PUT" });
    }
    delete(url, options = {}) {
        return this.request(url, { ...options, method: "DELETE" });
    }
    patch(url, options = {}) {
        return this.request(url, { ...options, method: "PATCH" });
    }
}
//# sourceMappingURL=ApiService.js.map
export interface IframeConfig {
    container: HTMLElement;
    displayMode: "embedded" | "modal";
    width?: string;
    height?: string;
    iframeId?: string;
    onClose?: () => void;
}
/**
 * IframeManager - Manages iframe visual presentation and DOM lifecycle
 * Handles styling, positioning, UI components, and iframe element creation/cleanup
 */
export declare class IframeManager {
    private static readonly MODAL_Z_INDEX;
    private static readonly MODAL_WIDTH;
    private static readonly MODAL_BACKDROP_COLOR;
    private static readonly MODAL_BACKDROP_BLUR;
    private static readonly BORDER_RADIUS;
    private static readonly TRANSITION_DURATION;
    private static readonly MODAL_MIN_HEIGHT;
    private static readonly EMBEDDED_MIN_HEIGHT;
    private static readonly IFRAME_READY_DELAY;
    private iframe;
    private container;
    private resizer;
    private displayMode;
    private keydownHandler?;
    private clickHandler?;
    private iframeId;
    private onClose?;
    private shimmerLoader;
    private closeButton;
    private isIframeLoaded;
    private iframeReadyMessageListener?;
    private logger;
    private contentWrapper;
    private iframeWrapper;
    constructor(config: IframeConfig);
    private initializeContainer;
    /**
     * Applies modal backdrop styles to create a full-screen overlay
     * Uses !important to override any existing styles
     */
    private applyModalStyles;
    private setupKeyboardHandlers;
    createIframe(url: string): HTMLIFrameElement;
    /**
     * Applies base styles to the iframe element
     */
    private applyIframeStyles;
    /**
     * Sets iframe attributes to prevent scrollbars
     */
    private setIframeAttributes;
    /**
     * Adds CSS styles to hide scrollbars across different browsers
     */
    private addScrollbarHidingStyles;
    /**
     * Sets up the message listener for iframe ready events
     */
    private setupIframeMessageListener;
    /**
     * Sets up the iframe onload handler with CSS injection
     */
    private setupIframeOnloadHandler;
    /**
     * Sets up the iframe for modal display mode
     */
    private setupModalIframe;
    /**
     * Sets up the iframe for embedded display mode
     */
    private setupEmbeddedIframe;
    private showShimmerLoader;
    private hideShimmerLoader;
    private markIframeAsLoaded;
    private updateWrapperForLoadedContent;
    hide(): void;
    private cleanupIframeOnly;
    cleanup(): void;
    /**
     * Resets all modal-specific styles by removing CSS properties that were set with !important
     */
    private resetModalStyles;
    resize(): void;
    /**
     * Force show the shimmer loader and hide iframe content
     * Used when we want to mask non-login content
     */
    forceShowLoader(): void;
    /**
     * Force hide the shimmer loader and show iframe content
     * Used when we want to show the login app
     */
    forceHideLoader(): void;
    /**
     * Applies visual styling (borders, shadows) to modal content wrapper
     */
    private applyModalVisualStyling;
    /**
     * Removes visual styling (borders, shadows) from modal content wrapper
     */
    private removeModalVisualStyling;
    /**
     * Applies visual styling (borders) to iframe wrapper
     */
    private applyIframeWrapperStyling;
    /**
     * Removes visual styling (borders) from iframe wrapper
     */
    private removeIframeWrapperStyling;
    showSubtlePopupFallbackIndicator(): void;
}
//# sourceMappingURL=IframeManager.d.ts.map
import type { AuthenticationEvents } from "../auth/AuthenticationEvents.js";
import type { createLogger } from "../utils/logger.js";
import type { AuthResult } from "../types/index.js";
interface SignalObserverConfig {
    textSignals: {
        success: string;
        error?: string;
    };
    events?: AuthenticationEvents;
    logger: ReturnType<typeof createLogger>;
}
export declare class SignalObserver {
    private config;
    private observer?;
    private authPromiseResolve?;
    private authPromiseReject?;
    private cleanupCallback?;
    constructor(config: SignalObserverConfig, authPromiseResolve?: (value: AuthResult) => void, authPromiseReject?: (reason?: Error) => void, cleanupCallback?: () => void);
    setup(iframeDoc: Document): void;
    disconnect(): void;
    private isRelevantMutation;
    private handleSignalNodes;
    private handleSuccessNode;
    private handleErrorNode;
    private handleBodyTextSignals;
    private handleBodySuccessSignal;
    private handleBodyErrorSignal;
    private parseUserInfo;
    private handleInitialSignals;
    private cleanup;
}
export {};
//# sourceMappingURL=SignalObserver.d.ts.map
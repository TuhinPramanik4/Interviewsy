{"version":3,"file":"AuthTypes.js","sourceRoot":"","sources":["../../../../src/vanillajs/auth/types/AuthTypes.ts"],"names":[],"mappings":"AAaA;;GAEG;AACH,MAAM,CAAN,IAAY,kBAiBX;AAjBD,WAAY,kBAAkB;IAC5B,yDAAmC,CAAA;IACnC,iDAA2B,CAAA;IAC3B,6EAAuD,CAAA;IACvD,iEAA2C,CAAA;IAC3C,mEAA6C,CAAA;IAC7C,6DAAuC,CAAA;IACvC,yDAAmC,CAAA;IACnC,qDAA+B,CAAA;IAC/B,qDAA+B,CAAA;IAC/B,uDAAiC,CAAA;IACjC,iEAA2C,CAAA;IAC3C,mEAA6C,CAAA;IAC7C,6DAAuC,CAAA;IACvC,qDAA+B,CAAA;IAC/B,2DAAqC,CAAA;IACrC,uDAAiC,CAAA;AACnC,CAAC,EAjBW,kBAAkB,KAAlB,kBAAkB,QAiB7B;AAED;;GAEG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG;IAClC,iBAAiB,EAAE,mBAAmB;IACtC,4BAA4B,EAAE,KAAK,EAAE,aAAa;IAClD,iBAAiB,EAAE,2BAA2B;IAC9C,eAAe,EAAE,yBAAyB;CAClC,CAAC;AAgCX,MAAM,OAAO,cAAe,SAAQ,KAAK;IAGrB;IAFlB,YACE,OAAe,EACC,IAAwB;QAExC,KAAK,CAAC,OAAO,CAAC,CAAC;QAFC,SAAI,GAAJ,IAAI,CAAoB;QAGxC,IAAI,CAAC,IAAI,GAAG,gBAAgB,CAAC;IAC/B,CAAC;CACF","sourcesContent":["import type { AuthenticationEvents } from \"../AuthenticationEvents.js\";\nimport type {\n  DisplayMode as BaseDisplayMode,\n  AuthStorage,\n} from \"../../../types.js\";\n\n/**\n * Extended DisplayMode for VanillaJS that includes \"embedded\" option\n * This provides a cleaner API where users can simply use displayMode: \"embedded\"\n * instead of displayMode: \"iframe\" + iframeDisplayMode: \"embedded\"\n */\nexport type VanillaJSDisplayMode = BaseDisplayMode | \"embedded\";\n\n/**\n * Error codes for CivicAuth errors\n */\nexport enum CivicAuthErrorCode {\n  CONFIG_REQUIRED = \"CONFIG_REQUIRED\",\n  INIT_FAILED = \"INIT_FAILED\",\n  ENDPOINTS_NOT_INITIALIZED = \"ENDPOINTS_NOT_INITIALIZED\",\n  CONTAINER_NOT_FOUND = \"CONTAINER_NOT_FOUND\",\n  AUTH_PROCESS_TIMEOUT = \"AUTH_PROCESS_TIMEOUT\",\n  IFRAME_LOAD_ERROR = \"IFRAME_LOAD_ERROR\",\n  INVALID_MESSAGE = \"INVALID_MESSAGE\",\n  LOGOUT_FAILED = \"LOGOUT_FAILED\",\n  POPUP_BLOCKED = \"popup_blocked\",\n  USER_CANCELLED = \"user_cancelled\",\n  CONFIGURATION_ERROR = \"configuration_error\",\n  TOKEN_REFRESH_FAILED = \"token_refresh_failed\",\n  SESSION_NOT_FOUND = \"session_not_found\",\n  STORAGE_ERROR = \"storage_error\",\n  IFRAME_NOT_FOUND = \"iframe_not_found\",\n  INTERNAL_ERROR = \"internal_error\",\n}\n\n/**\n * Constants for the auth client\n */\nexport const CIVIC_AUTH_CONSTANTS = {\n  DEFAULT_IFRAME_ID: \"civic-auth-iframe\",\n  DEFAULT_AUTH_PROCESS_TIMEOUT: 60000, // 60 seconds\n  SUCCESS_SIGNAL_ID: \"civic-auth-success-signal\",\n  ERROR_SIGNAL_ID: \"civic-auth-error-signal\",\n} as const;\n\n/**\n * Message types for postMessage communication\n */\nexport type AuthMessageType = \"auth_success\" | \"auth_error\";\n\nexport interface AuthMessage {\n  type: AuthMessageType;\n  detail?: string;\n  data?: unknown;\n  error?: unknown;\n}\n\n/**\n * Login app message types for postMessage communication\n */\nexport interface LoginAppMessage {\n  source: \"civicloginApp\";\n  type: string;\n  clientId: string;\n  data?: unknown;\n}\n\n/**\n * Combined message type for all iframe communications\n */\nexport type IframeMessage =\n  | AuthMessage\n  | LoginAppMessage\n  | Record<string, unknown>;\n\nexport class CivicAuthError extends Error {\n  constructor(\n    message: string,\n    public readonly code: CivicAuthErrorCode,\n  ) {\n    super(message);\n    this.name = \"CivicAuthError\";\n  }\n}\n\n/**\n * Configuration options for the CivicAuth client\n */\nexport interface CivicAuthClientConfig {\n  /** OAuth client ID */\n  clientId: string;\n  /** URL to redirect to after authentication */\n  redirectUrl?: string;\n  /** URL to redirect to after logout - if not provided, will use redirectUrl */\n  logoutRedirectUrl?: string;\n  /** Base URL of the OAuth server */\n  oauthServerBaseUrl?: string;\n  /** Array of OAuth scopes to request */\n  scopes?: string[];\n  /** HTML element or element ID where the auth iframe will be mounted (required for embedded iframe mode) */\n  targetContainerElement?: HTMLElement | string;\n  /** Text signals for success and error states */\n  textSignals?: {\n    /** Text to display on successful authentication */\n    success: string;\n    /** Optional text to display on authentication error */\n    error?: string;\n  };\n  /** Display mode for the authentication UI - VanillaJS supports \"embedded\" for simplified API */\n  displayMode?: VanillaJSDisplayMode;\n  /** Display mode for iframe rendering - modal (full-screen overlay) or embedded (within container) */\n  iframeDisplayMode?: \"modal\" | \"embedded\";\n  /**\n   * Timeout duration in milliseconds for the entire authentication process.\n   * If the authentication process takes longer than this duration, it will be cancelled\n   * and an error will be thrown.\n   * Note: This timeout is not applied to embedded iframe mode, where the iframe remains persistent.\n   */\n  authProcessTimeout?: number;\n  /** Event handlers for authentication events */\n  events?: AuthenticationEvents;\n  /** Custom ID for the auth iframe */\n  iframeId?: string;\n  /** Custom storage adapter for auth state - uses shared AuthStorage interface */\n  storageAdapter?: AuthStorage;\n  /** OAuth nonce parameter for security */\n  nonce?: string;\n  /** Initial state for OAuth flow */\n  initialState?: string;\n  /** Logging configuration */\n  logging?: LoggingConfig;\n}\n\nexport interface LoggingConfig {\n  enabled: boolean;\n  namespace?: string;\n  level?: \"debug\" | \"info\" | \"warn\" | \"error\";\n}\n\n/**\n * Internal configuration with all optional properties resolved to required ones.\n */\nexport type ProcessedCivicAuthConfig = CivicAuthClientConfig & {\n  redirectUrl: string;\n  logoutRedirectUrl: string;\n  oauthServerBaseUrl: string;\n  scopes: string[];\n  textSignals: {\n    success: string;\n    error?: string;\n  };\n  storageAdapter: AuthStorage;\n  logging: LoggingConfig;\n  displayMode: BaseDisplayMode; // Internal config uses base DisplayMode after processing\n  authProcessTimeout: number;\n  iframeId: string;\n  prompt: string;\n  nonce?: string;\n  // targetContainerElement remains optional as it's not needed for all display modes\n};\n"]}
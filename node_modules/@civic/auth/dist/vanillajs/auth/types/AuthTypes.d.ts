import type { AuthenticationEvents } from "../AuthenticationEvents.js";
import type { DisplayMode as BaseDisplayMode, AuthStorage } from "../../../types.js";
/**
 * Extended DisplayMode for VanillaJS that includes "embedded" option
 * This provides a cleaner API where users can simply use displayMode: "embedded"
 * instead of displayMode: "iframe" + iframeDisplayMode: "embedded"
 */
export type VanillaJSDisplayMode = BaseDisplayMode | "embedded";
/**
 * Error codes for CivicAuth errors
 */
export declare enum CivicAuthErrorCode {
    CONFIG_REQUIRED = "CONFIG_REQUIRED",
    INIT_FAILED = "INIT_FAILED",
    ENDPOINTS_NOT_INITIALIZED = "ENDPOINTS_NOT_INITIALIZED",
    CONTAINER_NOT_FOUND = "CONTAINER_NOT_FOUND",
    AUTH_PROCESS_TIMEOUT = "AUTH_PROCESS_TIMEOUT",
    IFRAME_LOAD_ERROR = "IFRAME_LOAD_ERROR",
    INVALID_MESSAGE = "INVALID_MESSAGE",
    LOGOUT_FAILED = "LOGOUT_FAILED",
    POPUP_BLOCKED = "popup_blocked",
    USER_CANCELLED = "user_cancelled",
    CONFIGURATION_ERROR = "configuration_error",
    TOKEN_REFRESH_FAILED = "token_refresh_failed",
    SESSION_NOT_FOUND = "session_not_found",
    STORAGE_ERROR = "storage_error",
    IFRAME_NOT_FOUND = "iframe_not_found",
    INTERNAL_ERROR = "internal_error"
}
/**
 * Constants for the auth client
 */
export declare const CIVIC_AUTH_CONSTANTS: {
    readonly DEFAULT_IFRAME_ID: "civic-auth-iframe";
    readonly DEFAULT_AUTH_PROCESS_TIMEOUT: 60000;
    readonly SUCCESS_SIGNAL_ID: "civic-auth-success-signal";
    readonly ERROR_SIGNAL_ID: "civic-auth-error-signal";
};
/**
 * Message types for postMessage communication
 */
export type AuthMessageType = "auth_success" | "auth_error";
export interface AuthMessage {
    type: AuthMessageType;
    detail?: string;
    data?: unknown;
    error?: unknown;
}
/**
 * Login app message types for postMessage communication
 */
export interface LoginAppMessage {
    source: "civicloginApp";
    type: string;
    clientId: string;
    data?: unknown;
}
/**
 * Combined message type for all iframe communications
 */
export type IframeMessage = AuthMessage | LoginAppMessage | Record<string, unknown>;
export declare class CivicAuthError extends Error {
    readonly code: CivicAuthErrorCode;
    constructor(message: string, code: CivicAuthErrorCode);
}
/**
 * Configuration options for the CivicAuth client
 */
export interface CivicAuthClientConfig {
    /** OAuth client ID */
    clientId: string;
    /** URL to redirect to after authentication */
    redirectUrl?: string;
    /** URL to redirect to after logout - if not provided, will use redirectUrl */
    logoutRedirectUrl?: string;
    /** Base URL of the OAuth server */
    oauthServerBaseUrl?: string;
    /** Array of OAuth scopes to request */
    scopes?: string[];
    /** HTML element or element ID where the auth iframe will be mounted (required for embedded iframe mode) */
    targetContainerElement?: HTMLElement | string;
    /** Text signals for success and error states */
    textSignals?: {
        /** Text to display on successful authentication */
        success: string;
        /** Optional text to display on authentication error */
        error?: string;
    };
    /** Display mode for the authentication UI - VanillaJS supports "embedded" for simplified API */
    displayMode?: VanillaJSDisplayMode;
    /** Display mode for iframe rendering - modal (full-screen overlay) or embedded (within container) */
    iframeDisplayMode?: "modal" | "embedded";
    /**
     * Timeout duration in milliseconds for the entire authentication process.
     * If the authentication process takes longer than this duration, it will be cancelled
     * and an error will be thrown.
     * Note: This timeout is not applied to embedded iframe mode, where the iframe remains persistent.
     */
    authProcessTimeout?: number;
    /** Event handlers for authentication events */
    events?: AuthenticationEvents;
    /** Custom ID for the auth iframe */
    iframeId?: string;
    /** Custom storage adapter for auth state - uses shared AuthStorage interface */
    storageAdapter?: AuthStorage;
    /** OAuth nonce parameter for security */
    nonce?: string;
    /** Initial state for OAuth flow */
    initialState?: string;
    /** Logging configuration */
    logging?: LoggingConfig;
}
export interface LoggingConfig {
    enabled: boolean;
    namespace?: string;
    level?: "debug" | "info" | "warn" | "error";
}
/**
 * Internal configuration with all optional properties resolved to required ones.
 */
export type ProcessedCivicAuthConfig = CivicAuthClientConfig & {
    redirectUrl: string;
    logoutRedirectUrl: string;
    oauthServerBaseUrl: string;
    scopes: string[];
    textSignals: {
        success: string;
        error?: string;
    };
    storageAdapter: AuthStorage;
    logging: LoggingConfig;
    displayMode: BaseDisplayMode;
    authProcessTimeout: number;
    iframeId: string;
    prompt: string;
    nonce?: string;
};
//# sourceMappingURL=AuthTypes.d.ts.map
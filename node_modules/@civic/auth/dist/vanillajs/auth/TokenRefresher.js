import { AuthEvent } from "../types/index.js";
import { BrowserAuthenticationRefresher, } from "../../shared/lib/BrowserAuthenticationRefresher.js";
import { createLogger } from "../utils/logger.js";
import { retrieveOidcSessionExpiredAt } from "../../shared/lib/util.js";
/**
 * TokenRefresher handles automatic token refresh for vanilla.js implementation
 * Inspired by the React useRefresh hook and BrowserAuthenticationRefresher
 */
export class TokenRefresher {
    refresher;
    storage;
    events;
    authConfig;
    isAuthenticated = false;
    isDestroyed = false;
    logger = createLogger("token-refresh");
    constructor(storage, events, authConfig) {
        this.storage = storage;
        this.events = events;
        this.authConfig = authConfig;
        this.logger.info("TokenRefresher initialized");
    }
    /**
     * Initialize the token refresher with auth configuration
     */
    async initialize(authConfig) {
        if (this.isDestroyed)
            return;
        this.authConfig = authConfig;
        try {
            // Clear any existing refresher
            await this.cleanup();
            const onError = async (error) => {
                this.logger.error("Token refresh error:", error);
                this.events.emit(AuthEvent.TOKEN_REFRESH_ERROR, error);
                // Clear auto-refresh on error
                this.refresher?.clearAutorefresh();
                // Optionally sign out the user on refresh token errors
                // This mirrors the React implementation behavior
                this.events.emit(AuthEvent.SIGN_OUT_STARTED, null);
            };
            // Create callbacks for refresh events
            const refreshEventCallbacks = {
                onRefreshStarted: () => {
                    this.logger.info("Auto token refresh started");
                    this.events.emit(AuthEvent.TOKEN_REFRESH_STARTED, null);
                },
                onRefreshComplete: () => {
                    this.logger.info("Auto token refresh completed");
                    this.events.emit(AuthEvent.TOKEN_REFRESH_COMPLETE, null);
                },
                onRefreshError: (error) => {
                    this.logger.error("Auto token refresh failed:", error);
                    this.events.emit(AuthEvent.TOKEN_REFRESH_ERROR, error);
                },
            };
            this.refresher = await BrowserAuthenticationRefresher.build(authConfig, this.storage, onError, undefined, // endpointOverrides
            refreshEventCallbacks);
            this.logger.info("TokenRefresher initialized");
        }
        catch (error) {
            this.logger.error("Failed to initialize TokenRefresher:", error);
            this.events.emit(AuthEvent.TOKEN_REFRESH_ERROR, error);
        }
    }
    /**
     * Set authentication state and manage auto-refresh accordingly
     */
    setAuthenticationState(isAuthenticated) {
        if (this.isDestroyed)
            return;
        this.isAuthenticated = isAuthenticated;
        if (isAuthenticated && this.refresher) {
            // Fire and forget the async call - we don't want to make setAuthenticationState async
            // as it would break the interface
            this.startAutoRefresh().catch((error) => {
                this.logger.error("Error starting auto refresh:", error);
            });
        }
        else {
            this.stopAutoRefresh();
        }
    }
    /**
     * Manually refresh tokens
     */
    async refreshTokens() {
        if (this.isDestroyed || !this.refresher) {
            const errorMsg = `TokenRefresher not initialized or destroyed. isDestroyed: ${this.isDestroyed}, hasRefresher: ${!!this.refresher}`;
            this.logger.error(errorMsg);
            throw new Error(errorMsg);
        }
        try {
            this.events.emit(AuthEvent.TOKEN_REFRESH_STARTED, null);
            this.logger.info("Starting manual token refresh");
            await this.refresher.refreshTokens();
            this.events.emit(AuthEvent.TOKEN_REFRESH_COMPLETE, null);
            this.logger.info("Manual token refresh completed");
        }
        catch (error) {
            this.logger.error("Manual token refresh failed:", error);
            this.events.emit(AuthEvent.TOKEN_REFRESH_ERROR, error);
            throw error;
        }
    }
    /**
     * Start automatic token refresh
     */
    async startAutoRefresh() {
        if (this.refresher && this.isAuthenticated) {
            this.logger.info("Starting automatic token refresh");
            try {
                // Calculate when the next refresh will happen (same logic as BrowserAuthenticationRefresher)
                const now = Math.floor(Date.now() / 1000);
                const expiresAt = (await retrieveOidcSessionExpiredAt(this.storage)) || now + 60;
                const bufferTime = 30; // 30 seconds buffer
                const refreshTime = Math.max(0, expiresAt - bufferTime - now);
                const nextRefreshDate = new Date((now + refreshTime) * 1000);
                this.logger.info(`Next token refresh scheduled for: ${nextRefreshDate.toISOString()} (in ${refreshTime} seconds)`);
            }
            catch (error) {
                this.logger.warn("Could not calculate next refresh time:", error);
            }
            this.refresher.setupAutorefresh();
        }
    }
    /**
     * Stop automatic token refresh
     */
    stopAutoRefresh() {
        if (this.refresher) {
            this.logger.info("Stopping automatic token refresh");
            this.refresher.clearAutorefresh();
        }
    }
    /**
     * Clean up resources
     */
    async cleanup() {
        this.logger.info("Cleaning up TokenRefresher");
        if (this.refresher) {
            this.refresher.clearAutorefresh();
            this.refresher = undefined;
        }
        this.isAuthenticated = false;
    }
    /**
     * Destroy the token refresher permanently
     */
    async destroy() {
        this.isDestroyed = true;
        await this.cleanup();
        this.logger.info("TokenRefresher destroyed");
    }
    /**
     * Get current refresh state
     */
    getState() {
        return {
            isInitialized: !!this.refresher,
            isAuthenticated: this.isAuthenticated,
            isAutoRefreshActive: this.isAuthenticated && !!this.refresher,
        };
    }
}
//# sourceMappingURL=TokenRefresher.js.map
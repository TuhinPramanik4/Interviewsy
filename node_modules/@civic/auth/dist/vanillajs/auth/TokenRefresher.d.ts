import type { AuthStorage } from "../../types.js";
import type { AuthenticationEvents } from "./AuthenticationEvents.js";
import type { AuthConfig } from "../../server/config.js";
/**
 * TokenRefresher handles automatic token refresh for vanilla.js implementation
 * Inspired by the React useRefresh hook and BrowserAuthenticationRefresher
 */
export declare class TokenRefresher {
    private refresher?;
    private storage;
    private events;
    private authConfig?;
    private isAuthenticated;
    private isDestroyed;
    private logger;
    constructor(storage: AuthStorage, events: AuthenticationEvents, authConfig?: AuthConfig);
    /**
     * Initialize the token refresher with auth configuration
     */
    initialize(authConfig: AuthConfig): Promise<void>;
    /**
     * Set authentication state and manage auto-refresh accordingly
     */
    setAuthenticationState(isAuthenticated: boolean): void;
    /**
     * Manually refresh tokens
     */
    refreshTokens(): Promise<void>;
    /**
     * Start automatic token refresh
     */
    private startAutoRefresh;
    /**
     * Stop automatic token refresh
     */
    private stopAutoRefresh;
    /**
     * Clean up resources
     */
    cleanup(): Promise<void>;
    /**
     * Destroy the token refresher permanently
     */
    destroy(): Promise<void>;
    /**
     * Get current refresh state
     */
    getState(): {
        isInitialized: boolean;
        isAuthenticated: boolean;
        isAutoRefreshActive: boolean;
    };
}
//# sourceMappingURL=TokenRefresher.d.ts.map
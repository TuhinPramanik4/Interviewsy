import type { AuthResult } from "../../types/index.js";
import type { ProcessedCivicAuthConfig } from "../types/AuthTypes.js";
import type { createLogger } from "../../utils/logger.js";
export interface PopupHandlerConfig {
    config: ProcessedCivicAuthConfig;
    logger: ReturnType<typeof createLogger>;
    onAuthSuccess: (result: AuthResult) => void;
    onAuthError: (error: Error) => void;
    cleanup: () => void;
}
export declare class PopupHandler {
    private config;
    private logger;
    private popup?;
    private popupCheckInterval?;
    private onAuthSuccess;
    private onAuthError;
    private cleanup;
    constructor(handlerConfig: PopupHandlerConfig);
    /**
     * Initiates authentication flow using a popup window.
     *
     * Opens a new browser window/tab for authentication, handles browser compatibility
     * (especially Safari), and sets up monitoring for the authentication process.
     *
     * @param fullAuthUrl - The complete authentication URL to open in the popup
     * @throws {PopupError} When popup window cannot be opened (blocked by browser)
     * @returns Promise that resolves when popup setup is complete
     */
    handleNewTabAuth(fullAuthUrl: string): Promise<void>;
    /**
     * Safely retrieves the current location of a popup window.
     *
     * Attempts to access the popup's location.href property, handling cross-origin
     * access restrictions gracefully by returning a descriptive message instead of throwing.
     *
     * @param popup - The popup window to get location from
     * @returns The popup's URL or a descriptive message if access is restricted
     */
    private getPopupLocationSafely;
    /**
     * Monitors a popup window for authentication results and handles communication.
     *
     * This method sets up a postMessage listener to receive authentication results from the popup
     * and periodically checks if the popup has been closed. It handles success/error messages
     * and automatically cleans up resources when the popup closes or times out.
     *
     * @param popup - The popup window to monitor for authentication completion
     *
     * @remarks
     * - Monitors popup for up to 5 minutes (300 checks at 1-second intervals)
     * - Listens for 'auth_success' and 'auth_error' message types from the popup
     * - Automatically removes event listeners and resolves/rejects promises when done
     * - Logs detailed debugging information throughout the monitoring process
     *
     * @private
     */
    private monitorPopup;
    /**
     * Handles successful authentication completion from the popup.
     *
     * Processes the authentication success message received from the popup window,
     * emits success events, triggers the success callback, and performs cleanup.
     *
     * @param message - The authentication message containing success data
     * @param popupMessageHandler - The message event handler to clean up, or null if none exists
     */
    private handlePopupSuccess;
    /**
     * Handles authentication errors received from the popup.
     *
     * Processes error messages from the popup window, emits error events,
     * creates appropriate CivicAuthError instances, and performs cleanup.
     *
     * @param message - The authentication message containing error details
     * @param popupMessageHandler - The message event handler to clean up, or null if none exists
     */
    private handlePopupError;
    /**
     * Handles the scenario when the authentication popup is closed by the user.
     * This method is called when the popup window is detected as closed during monitoring.
     * It emits an error event, creates an appropriate error, and performs cleanup.
     *
     * @param popupMessageHandler - The message event handler to clean up, or null if none exists
     */
    private handlePopupClosed;
    /**
     * Handles authentication timeout scenarios.
     *
     * Called when the popup monitoring reaches its maximum time limit without
     * receiving authentication results. Emits timeout events, creates timeout errors,
     * and performs cleanup operations.
     *
     * @param popupMessageHandler - The message event handler to clean up, or null if none exists
     */
    private handlePopupTimeout;
    /**
     * Monitors the popup's location for redirect changes.
     *
     * Attempts to check if the popup has redirected to the callback URL, which
     * indicates the authentication flow has progressed. Handles cross-origin
     * access restrictions gracefully by catching and logging access errors.
     *
     * @param popup - The popup window to monitor for location changes
     */
    private checkPopupLocation;
}
//# sourceMappingURL=PopupHandler.d.ts.map
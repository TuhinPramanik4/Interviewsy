/**
 * OAuth Callback Handler for Vanilla JavaScript Applications
 *
 * This module provides functionality for handling OAuth redirect/callback pages in vanilla JavaScript
 * applications using the Civic Auth system. It processes the OAuth authorization code flow completion
 * by exchanging authorization codes for access tokens and managing the authentication state.
 *
 * Key responsibilities:
 * - Process OAuth callback URL parameters (code, state)
 * - Exchange authorization codes for access tokens using PKCE
 * - Store tokens and user session data using shared utilities
 * - Create DOM signals for iframe-based authentication flows
 * - Handle error states and cleanup during the OAuth flow
 *
 * This module works in conjunction with:
 * - CivicAuth class for initiating OAuth flows
 * - SignalObserver for detecting authentication completion in iframes
 * - Shared token storage utilities for consistent state management
 *
 * @example
 * ```javascript
 * // Basic usage
 * const config = {
 *   clientId: 'your-client-id',
 *   redirectUrl: 'https://yourapp.com/callback',
 *   oauthServer: 'https://auth.civic.com/oauth',
 *   scopes: ['openid', 'profile', 'email']
 * };
 * const result = await handleOAuthRedirectPage(config);
 * ```
 */
import type { getCurrentLogger } from "../../utils/logger.js";
import type { AuthStorage, OIDCTokenResponseBody } from "../../../types.js";
/**
 * Store tokens using the shared utilities from /shared/lib
 * This ensures consistency with the React implementation and also handles user session storage
 */
export declare function storeTokens(tokens: OIDCTokenResponseBody, storageAdapter: AuthStorage, loggerInstance?: {
    debug: (message: string, ...args: unknown[]) => void;
    info: (message: string, ...args: unknown[]) => void;
    warn: (message: string, ...args: unknown[]) => void;
    error: (message: string, ...args: unknown[]) => void;
}): Promise<object | null>;
export interface HandleOAuthRedirectConfig {
    clientId: string;
    redirectUrl: string;
    oauthServer: string;
    textSignals: {
        success: string;
        error: string;
    };
    storageAdapter: AuthStorage;
    logger?: ReturnType<typeof getCurrentLogger>;
}
/**
 * Handle OAuth redirect page processing for vanilla JavaScript applications.
 * This function processes the OAuth callback URL parameters and exchanges the authorization code for tokens.
 *
 * @param config - Configuration object for handling the OAuth redirect
 * @param config.clientId - OAuth client ID
 * @param config.redirectUrl - URL to redirect to after authentication
 * @param config.oauthServer - OAuth server base URL
 * @param config.textSignals - Text signals for success and error states
 * @param config.storageAdapter - Storage adapter for persisting auth state (required)
 * @param config.logger - Optional logger instance
 * @returns Promise<boolean> - Returns true if callback was handled, false otherwise
 *
 * @example
 * ```javascript
 * // Using storeTokens with default iframe mode
 * const config = {
 *   clientId: 'your-client-id',
 *   redirectUrl: 'https://yourapp.com/callback',
 *   oauthServer: 'https://auth.civic.com/oauth',
 *   scopes: ['openid', 'profile', 'email']
 * };
 * await storeTokens(params, config);
 * ```
 */
export declare function handleOAuthRedirectPage(config: HandleOAuthRedirectConfig): Promise<boolean>;
//# sourceMappingURL=OAuthCallbackHandler.d.ts.map
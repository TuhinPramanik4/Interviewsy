{"version":3,"file":"PopupHandler.js","sourceRoot":"","sources":["../../../../src/vanillajs/auth/handlers/PopupHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import { AuthEvent } from \"../../types/index.js\";\nimport type { AuthResult } from \"../../types/index.js\";\nimport type {\n  ProcessedCivicAuthConfig,\n  AuthMessage,\n} from \"../types/AuthTypes.js\";\nimport { CivicAuthError, CivicAuthErrorCode } from \"../types/AuthTypes.js\";\nimport { PopupError } from \"../../../services/types.js\";\nimport type { createLogger } from \"../../utils/logger.js\";\nimport { createLogger as createLoggerFn } from \"../../utils/logger.js\";\n\nexport interface PopupHandlerConfig {\n  config: ProcessedCivicAuthConfig;\n  logger: ReturnType<typeof createLogger>; // Keep for interface compatibility but won't use\n  onAuthSuccess: (result: AuthResult) => void;\n  onAuthError: (error: Error) => void;\n  cleanup: () => void;\n}\n\nexport class PopupHandler {\n  private config: ProcessedCivicAuthConfig;\n  private logger = createLoggerFn(\"popup\"); // Create own logger\n  private popup?: Window | null;\n  private popupCheckInterval?: number;\n  private onAuthSuccess: (result: AuthResult) => void;\n  private onAuthError: (error: Error) => void;\n  private cleanup: () => void;\n\n  constructor(handlerConfig: PopupHandlerConfig) {\n    this.config = handlerConfig.config;\n    // Don't use handlerConfig.logger - use our own logger instead\n    this.onAuthSuccess = handlerConfig.onAuthSuccess;\n    this.onAuthError = handlerConfig.onAuthError;\n    this.cleanup = handlerConfig.cleanup;\n  }\n\n  /**\n   * Initiates authentication flow using a popup window.\n   *\n   * Opens a new browser window/tab for authentication, handles browser compatibility\n   * (especially Safari), and sets up monitoring for the authentication process.\n   *\n   * @param fullAuthUrl - The complete authentication URL to open in the popup\n   * @throws {PopupError} When popup window cannot be opened (blocked by browser)\n   * @returns Promise that resolves when popup setup is complete\n   */\n  public async handleNewTabAuth(fullAuthUrl: string): Promise<void> {\n    this.logger.info(\"🚀 Starting new tab authentication\", {\n      url: fullAuthUrl,\n      userAgent: navigator.userAgent,\n      isSafari:\n        /Safari/.test(navigator.userAgent) &&\n        !/Chrome/.test(navigator.userAgent),\n    });\n\n    try {\n      // For Safari, use specific window features that work better\n      const isSafari =\n        /Safari/.test(navigator.userAgent) &&\n        !/Chrome/.test(navigator.userAgent);\n      const windowFeatures = isSafari\n        ? \"width=500,height=600,scrollbars=yes,resizable=yes\"\n        : \"\";\n\n      const popupWindow = isSafari\n        ? window.open(fullAuthUrl, \"_blank\", windowFeatures)\n        : window.open(fullAuthUrl, \"_blank\");\n\n      this.logger.info(\"📱 Popup window attempt result\", {\n        popupWindow: popupWindow,\n        popupWindowType: typeof popupWindow,\n        isNull: popupWindow === null,\n        isUndefined: popupWindow === undefined,\n        windowFeatures: isSafari ? windowFeatures : \"none specified\",\n        isSafari,\n      });\n\n      if (!popupWindow) {\n        throw new PopupError(\n          \"Failed to open popup window - likely blocked by browser\",\n        );\n      }\n\n      // Additional Safari-specific check: Safari might return a window object but still block it\n      if (isSafari) {\n        // Give Safari a moment to potentially close the popup if it was blocked\n        setTimeout(() => {\n          if (popupWindow.closed) {\n            this.logger.warn(\n              \"🚫 Safari popup was immediately closed (likely blocked)\",\n            );\n            const error = new PopupError(\"Safari blocked popup window\");\n            if (this.config.events) {\n              this.config.events.emit(AuthEvent.SIGN_IN_ERROR, {\n                detail: error.message,\n                error,\n              });\n            }\n            this.onAuthError(error);\n            return;\n          }\n        }, 100);\n      }\n\n      this.logger.info(\"✅ Popup window opened successfully\", {\n        popupWindow: !!popupWindow,\n        popupClosed: popupWindow.closed,\n        popupLocation: this.getPopupLocationSafely(popupWindow),\n      });\n\n      // Set up popup monitoring\n      this.monitorPopup(popupWindow);\n    } catch (error) {\n      this.logger.error(\"❌ Popup window creation failed\", {\n        error: error,\n        errorType: error instanceof PopupError ? \"PopupError\" : \"Other\",\n      });\n\n      if (error instanceof PopupError) {\n        // Re-throw PopupError to be caught by the main authentication flow\n        throw error;\n      } else {\n        // Wrap other errors as PopupError\n        throw new PopupError(\n          `window.open has thrown: ${error instanceof Error ? error.message : String(error)}`,\n        );\n      }\n    }\n  }\n\n  /**\n   * Safely retrieves the current location of a popup window.\n   *\n   * Attempts to access the popup's location.href property, handling cross-origin\n   * access restrictions gracefully by returning a descriptive message instead of throwing.\n   *\n   * @param popup - The popup window to get location from\n   * @returns The popup's URL or a descriptive message if access is restricted\n   */\n  private getPopupLocationSafely(popup: Window): string {\n    try {\n      return popup.location.href;\n    } catch {\n      return \"cross-origin (cannot access)\";\n    }\n  }\n\n  /**\n   * Monitors a popup window for authentication results and handles communication.\n   *\n   * This method sets up a postMessage listener to receive authentication results from the popup\n   * and periodically checks if the popup has been closed. It handles success/error messages\n   * and automatically cleans up resources when the popup closes or times out.\n   *\n   * @param popup - The popup window to monitor for authentication completion\n   *\n   * @remarks\n   * - Monitors popup for up to 5 minutes (300 checks at 1-second intervals)\n   * - Listens for 'auth_success' and 'auth_error' message types from the popup\n   * - Automatically removes event listeners and resolves/rejects promises when done\n   * - Logs detailed debugging information throughout the monitoring process\n   *\n   * @private\n   */\n  private monitorPopup(popup: Window): void {\n    this.logger.info(\"👀 Starting popup monitoring\");\n\n    let checkCount = 0;\n    const maxChecks = 300; // 5 minutes at 1 second intervals\n    let popupMessageHandler: ((event: MessageEvent) => void) | null = null;\n\n    // Set up postMessage listener for popup communication\n    popupMessageHandler = (event: MessageEvent) => {\n      this.logger.debug(\"📨 Received message from popup\", {\n        origin: event.origin,\n        data: event.data,\n        source: event.source === popup,\n        messageType: event.data?.type,\n        isFromTargetPopup: event.source === popup,\n      });\n\n      // Verify the message is from our popup\n      if (event.source !== popup) {\n        this.logger.debug(\"🚫 Ignoring message from different source\", {\n          expectedSource: popup,\n          actualSource: event.source,\n        });\n        return;\n      }\n\n      const message = event.data;\n      if (message && typeof message === \"object\" && message.type) {\n        this.logger.info(\"✅ Valid popup message received\", {\n          type: message.type,\n          detail: message.detail,\n          hasData: !!message.data,\n        });\n\n        switch (message.type) {\n          case \"auth_success\":\n            this.handlePopupSuccess(message, popupMessageHandler);\n            break;\n          case \"auth_error\":\n            this.handlePopupError(message, popupMessageHandler);\n            break;\n          default:\n            this.logger.debug(\"🤷 Unknown message type from popup\", {\n              type: message.type,\n              fullMessage: message,\n            });\n        }\n      } else {\n        this.logger.debug(\"📨 Non-auth message received from popup\", {\n          messageType: typeof message,\n          message,\n        });\n      }\n    };\n\n    // Add the message listener\n    window.addEventListener(\"message\", popupMessageHandler);\n    this.logger.info(\"📡 Added popup message listener\", {\n      popupWindowExists: !!popup,\n      popupClosed: popup.closed,\n    });\n\n    const checkClosed = () => {\n      checkCount++;\n      this.logger.debug(`🔍 Popup check #${checkCount}`, {\n        closed: popup.closed,\n        location: this.getPopupLocationSafely(popup),\n        maxChecks,\n      });\n\n      if (popup.closed) {\n        this.handlePopupClosed(popupMessageHandler);\n        return;\n      }\n\n      if (checkCount >= maxChecks) {\n        this.handlePopupTimeout(popupMessageHandler);\n        return;\n      }\n\n      // Check popup location for redirect (this is now mainly for debugging)\n      this.checkPopupLocation(popup);\n\n      // Continue monitoring\n      setTimeout(checkClosed, 1000);\n    };\n\n    // Start monitoring\n    setTimeout(checkClosed, 1000);\n  }\n\n  /**\n   * Handles successful authentication completion from the popup.\n   *\n   * Processes the authentication success message received from the popup window,\n   * emits success events, triggers the success callback, and performs cleanup.\n   *\n   * @param message - The authentication message containing success data\n   * @param popupMessageHandler - The message event handler to clean up, or null if none exists\n   */\n  private handlePopupSuccess(\n    message: AuthMessage,\n    popupMessageHandler: ((event: MessageEvent) => void) | null,\n  ): void {\n    this.logger.info(\"🎉 Popup authentication successful\");\n    this.config.events?.emit(AuthEvent.SIGN_IN_COMPLETE, {\n      detail: \"Popup authentication successful\",\n      data: message.data,\n    });\n    this.onAuthSuccess(message.data || {});\n    this.cleanup();\n\n    // Clean up message listener\n    if (popupMessageHandler) {\n      window.removeEventListener(\"message\", popupMessageHandler);\n    }\n  }\n\n  /**\n   * Handles authentication errors received from the popup.\n   *\n   * Processes error messages from the popup window, emits error events,\n   * creates appropriate CivicAuthError instances, and performs cleanup.\n   *\n   * @param message - The authentication message containing error details\n   * @param popupMessageHandler - The message event handler to clean up, or null if none exists\n   */\n  private handlePopupError(\n    message: AuthMessage,\n    popupMessageHandler: ((event: MessageEvent) => void) | null,\n  ): void {\n    this.logger.error(\"❌ Popup authentication failed\", {\n      detail: message.detail,\n    });\n    this.config.events?.emit(AuthEvent.SIGN_IN_ERROR, {\n      detail: message.detail || \"Popup authentication failed\",\n      error: message.error,\n    });\n\n    const error = new CivicAuthError(\n      message.detail || \"Popup authentication failed\",\n      CivicAuthErrorCode.INVALID_MESSAGE,\n    );\n\n    this.onAuthError(error);\n    this.cleanup();\n\n    // Clean up message listener\n    if (popupMessageHandler) {\n      window.removeEventListener(\"message\", popupMessageHandler);\n    }\n  }\n\n  /**\n   * Handles the scenario when the authentication popup is closed by the user.\n   * This method is called when the popup window is detected as closed during monitoring.\n   * It emits an error event, creates an appropriate error, and performs cleanup.\n   *\n   * @param popupMessageHandler - The message event handler to clean up, or null if none exists\n   */\n  private handlePopupClosed(\n    popupMessageHandler: ((event: MessageEvent) => void) | null,\n  ): void {\n    this.logger.warn(\"🔒 Popup was closed by user\");\n    this.config.events?.emit(AuthEvent.SIGN_IN_ERROR, {\n      detail: \"Authentication cancelled by user (popup closed)\",\n    });\n\n    const error = new CivicAuthError(\n      \"Authentication cancelled by user\",\n      CivicAuthErrorCode.USER_CANCELLED,\n    );\n\n    this.onAuthError(error);\n    this.cleanup();\n\n    // Clean up message listener\n    if (popupMessageHandler) {\n      window.removeEventListener(\"message\", popupMessageHandler);\n    }\n  }\n\n  /**\n   * Handles authentication timeout scenarios.\n   *\n   * Called when the popup monitoring reaches its maximum time limit without\n   * receiving authentication results. Emits timeout events, creates timeout errors,\n   * and performs cleanup operations.\n   *\n   * @param popupMessageHandler - The message event handler to clean up, or null if none exists\n   */\n  private handlePopupTimeout(\n    popupMessageHandler: ((event: MessageEvent) => void) | null,\n  ): void {\n    this.logger.warn(\"⏰ Popup monitoring timeout reached\");\n    this.config.events?.emit(AuthEvent.SIGN_IN_ERROR, {\n      detail: \"Authentication timeout - popup monitoring stopped\",\n    });\n\n    const error = new CivicAuthError(\n      \"Authentication timeout\",\n      CivicAuthErrorCode.AUTH_PROCESS_TIMEOUT,\n    );\n\n    this.onAuthError(error);\n    this.cleanup();\n\n    // Clean up message listener\n    if (popupMessageHandler) {\n      window.removeEventListener(\"message\", popupMessageHandler);\n    }\n  }\n\n  /**\n   * Monitors the popup's location for redirect changes.\n   *\n   * Attempts to check if the popup has redirected to the callback URL, which\n   * indicates the authentication flow has progressed. Handles cross-origin\n   * access restrictions gracefully by catching and logging access errors.\n   *\n   * @param popup - The popup window to monitor for location changes\n   */\n  private checkPopupLocation(popup: Window): void {\n    try {\n      const popupLocation = popup.location.href;\n      this.logger.debug(\"📍 Popup location accessible\", {\n        location: popupLocation,\n        startsWithRedirect: popupLocation.startsWith(this.config.redirectUrl),\n      });\n\n      if (popupLocation.startsWith(this.config.redirectUrl)) {\n        this.logger.info(\"🎯 Popup redirected to callback URL\", {\n          location: popupLocation,\n        });\n        // The callback page should send us a postMessage, so we just wait for that\n      }\n    } catch (error) {\n      // Expected when popup is on different origin\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n      this.logger.debug(\"🔒 Cannot access popup location (cross-origin)\", {\n        error: errorMessage,\n      });\n    }\n  }\n}\n"]}
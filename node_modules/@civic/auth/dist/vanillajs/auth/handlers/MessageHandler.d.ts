import type { AuthResult } from "../../types/index.js";
import type { ProcessedCivicAuthConfig } from "../types/AuthTypes.js";
import type { createLogger } from "../../utils/logger.js";
export interface MessageHandlerConfig {
    config: ProcessedCivicAuthConfig;
    logger: ReturnType<typeof createLogger>;
    iframeElement?: HTMLIFrameElement;
    onAuthSuccess: (result: AuthResult) => void;
    onAuthError: (error: Error) => void;
    onPopupFailure: (failedUrl?: string) => void;
    cleanup: () => void;
}
/**
 * MessageHandler - Handles postMessage communication and authentication flow logic
 * Processes messages from iframe, validates origins, and manages auth state transitions
 */
export declare class MessageHandler {
    private config;
    private logger;
    private iframeElement?;
    private onAuthSuccess;
    private onAuthError;
    private onPopupFailure;
    private cleanup;
    constructor(handlerConfig: MessageHandlerConfig);
    /**
     * Updates the iframe element reference used for message validation.
     *
     * This method allows updating the iframe element after the MessageHandler
     * has been instantiated, which is useful when the iframe is created
     * dynamically after the handler setup.
     *
     * @param iframeElement - The new iframe element to associate with this handler
     */
    updateIframeElement(iframeElement: HTMLIFrameElement): void;
    /**
     * Main message handler for processing postMessage events.
     *
     * Validates message origin and source, then routes valid messages to
     * appropriate handlers. This is the entry point for all iframe communication.
     *
     * @param event - The MessageEvent received from the iframe or other sources
     */
    handleMessage: (event: MessageEvent) => void;
    /**
     * Logs incoming message details for debugging purposes.
     *
     * Provides comprehensive logging of message properties including origin,
     * source validation, and iframe state for troubleshooting communication issues.
     *
     * @param event - The MessageEvent to log
     * @param expectedOrigin - The expected origin for comparison
     */
    private logIncomingMessage;
    /**
     * Validates that a message comes from the expected origin and source.
     *
     * Performs security checks to ensure messages are only processed from
     * the configured OAuth server origin and the designated iframe element.
     *
     * @param event - The MessageEvent to validate
     * @param expectedOrigin - The expected origin URL for the message
     * @returns True if the message source and origin are valid, false otherwise
     */
    private isValidMessageSource;
    /**
     * Processes messages that have passed origin and source validation.
     *
     * Routes validated messages to specific handlers based on message type,
     * including civicloginApp messages, iframe resizer messages, and standard auth messages.
     *
     * @param event - The validated MessageEvent to process
     */
    private handleValidMessage;
    /**
     * Type guard to identify civicloginApp messages.
     *
     * Checks if a message object has the structure and source property
     * that identifies it as coming from the civicloginApp.
     *
     * @param message - The message object to check
     * @returns True if the message is a LoginAppMessage, false otherwise
     */
    private isCivicLoginAppMessage;
    /**
     * Handles messages originating from the civicloginApp.
     *
     * Processes various civicloginApp message types including authentication errors,
     * popup failures, design updates, and other app-specific communications.
     * Validates client ID matches before processing.
     *
     * @param message - The validated civicloginApp message to process
     */
    private handleCivicLoginAppMessage;
    /**
     * Handles authentication error messages from civicloginApp.
     *
     * Processes auth_error and auth_error_try_again messages, creates
     * appropriate error objects, emits error events, and triggers cleanup.
     *
     * @param message - The civicloginApp error message to process
     */
    private handleCivicLoginAppError;
    /**
     * Handles popup generation failure messages from civicloginApp.
     *
     * Processes generatePopupFailed messages, extracts the failed URL,
     * emits appropriate events, and triggers the popup failure callback
     * to enable fallback authentication methods.
     *
     * @param message - The civicloginApp popup failure message to process
     */
    private handlePopupFailure;
    /**
     * Handles unknown or unrecognized civicloginApp message types.
     *
     * Provides fallback handling for unexpected message types, with special
     * logic to detect potential success messages that don't match standard types.
     *
     * @param message - The unrecognized civicloginApp message to process
     */
    private handleUnknownCivicLoginAppMessage;
    /**
     * Type guard to identify iframe resizer messages.
     *
     * Checks if a message is related to iframe resizing functionality,
     * including both civic-specific resize messages and iFrameResizerChild messages.
     *
     * @param message - The message object to check
     * @returns True if the message is an iframe resizer message, false otherwise
     */
    private isIframeResizerMessage;
    /**
     * Handles iframe resizer messages for dynamic iframe sizing.
     *
     * Processes messages related to iframe resizing, including height adjustments
     * and ready state notifications from the iframe resizer library.
     *
     * @param message - The iframe resizer message to process
     */
    private handleIframeResizerMessage;
    /**
     * Handles standard authentication messages.
     *
     * Processes auth_success and auth_error messages that follow the standard
     * authentication message format, routing them to appropriate success or error handlers.
     *
     * @param message - The standard auth message to process
     */
    private handleStandardAuthMessage;
    /**
     * Handles successful authentication completion.
     *
     * Processes authentication success messages, emits success events,
     * triggers the success callback with authentication results, and performs cleanup.
     *
     * @param data - The authentication success message containing result data
     */
    private handleAuthSuccess;
    /**
     * Handles authentication errors.
     *
     * Processes authentication error messages, creates appropriate error objects,
     * emits error events, triggers the error callback, and performs cleanup.
     *
     * @param data - The authentication error message containing error details
     */
    private handleAuthError;
}
//# sourceMappingURL=MessageHandler.d.ts.map
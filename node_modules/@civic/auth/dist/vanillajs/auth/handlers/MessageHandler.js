import { AuthEvent } from "../../types/index.js";
import { CivicAuthError, CivicAuthErrorCode } from "../types/AuthTypes.js";
import { createLogger as createLoggerFn } from "../../utils/logger.js";
/**
 * MessageHandler - Handles postMessage communication and authentication flow logic
 * Processes messages from iframe, validates origins, and manages auth state transitions
 */
export class MessageHandler {
    config;
    logger = createLoggerFn("message-handler");
    iframeElement;
    onAuthSuccess;
    onAuthError;
    onPopupFailure;
    cleanup;
    constructor(handlerConfig) {
        this.config = handlerConfig.config;
        this.iframeElement = handlerConfig.iframeElement;
        this.onAuthSuccess = handlerConfig.onAuthSuccess;
        this.onAuthError = handlerConfig.onAuthError;
        this.onPopupFailure = handlerConfig.onPopupFailure;
        this.cleanup = handlerConfig.cleanup;
    }
    /**
     * Updates the iframe element reference used for message validation.
     *
     * This method allows updating the iframe element after the MessageHandler
     * has been instantiated, which is useful when the iframe is created
     * dynamically after the handler setup.
     *
     * @param iframeElement - The new iframe element to associate with this handler
     */
    updateIframeElement(iframeElement) {
        this.iframeElement = iframeElement;
    }
    /**
     * Main message handler for processing postMessage events.
     *
     * Validates message origin and source, then routes valid messages to
     * appropriate handlers. This is the entry point for all iframe communication.
     *
     * @param event - The MessageEvent received from the iframe or other sources
     */
    handleMessage = (event) => {
        const expectedOrigin = new URL(this.config.oauthServerBaseUrl).origin;
        this.logIncomingMessage(event, expectedOrigin);
        if (!this.isValidMessageSource(event, expectedOrigin)) {
            return;
        }
        this.handleValidMessage(event);
    };
    /**
     * Logs incoming message details for debugging purposes.
     *
     * Provides comprehensive logging of message properties including origin,
     * source validation, and iframe state for troubleshooting communication issues.
     *
     * @param event - The MessageEvent to log
     * @param expectedOrigin - The expected origin for comparison
     */
    logIncomingMessage(event, expectedOrigin) {
        this.logger.debug("Global window received message:", {
            data: event.data,
            origin: event.origin,
            sourceProvided: !!event.source,
            iframeContentWindow: this.iframeElement?.contentWindow,
            expectedIframeOrigin: expectedOrigin,
        });
    }
    /**
     * Validates that a message comes from the expected origin and source.
     *
     * Performs security checks to ensure messages are only processed from
     * the configured OAuth server origin and the designated iframe element.
     *
     * @param event - The MessageEvent to validate
     * @param expectedOrigin - The expected origin URL for the message
     * @returns True if the message source and origin are valid, false otherwise
     */
    isValidMessageSource(event, expectedOrigin) {
        const isValidOrigin = event.origin === expectedOrigin;
        const isValidSource = event.source === this.iframeElement?.contentWindow;
        if (!isValidOrigin) {
            this.logger.warn("Ignored message from unexpected origin.", {
                receivedOrigin: event.origin,
                expectedOrigin,
                iframeSrc: this.iframeElement?.src,
            });
        }
        if (!isValidSource) {
            this.logger.warn("Ignored message from unexpected source.", {
                isSourceProvided: !!event.source,
                isIframeContentWindowAvailable: !!this.iframeElement?.contentWindow,
                iframeSrc: this.iframeElement?.src,
            });
        }
        return isValidOrigin && isValidSource;
    }
    /**
     * Processes messages that have passed origin and source validation.
     *
     * Routes validated messages to specific handlers based on message type,
     * including civicloginApp messages, iframe resizer messages, and standard auth messages.
     *
     * @param event - The validated MessageEvent to process
     */
    handleValidMessage(event) {
        this.logger.info("Message from configured iframe source and origin received", {
            data: event.data,
            iframeSrc: this.iframeElement?.src,
        });
        const message = event.data;
        this.logger.debug("Processing iframe message", {
            messageType: typeof message,
            hasType: message && typeof message === "object" && "type" in message,
            hasSource: message && typeof message === "object" && "source" in message,
            messageKeys: message && typeof message === "object" ? Object.keys(message) : [],
            rawData: message,
        });
        // Handle civicloginApp messages
        if (this.isCivicLoginAppMessage(message)) {
            this.handleCivicLoginAppMessage(message);
            return;
        }
        // Handle iframe resizer messages
        if (this.isIframeResizerMessage(message)) {
            this.handleIframeResizerMessage(message);
            return;
        }
        // Handle standard auth messages
        this.handleStandardAuthMessage(message);
    }
    /**
     * Type guard to identify civicloginApp messages.
     *
     * Checks if a message object has the structure and source property
     * that identifies it as coming from the civicloginApp.
     *
     * @param message - The message object to check
     * @returns True if the message is a LoginAppMessage, false otherwise
     */
    isCivicLoginAppMessage(message) {
        return (message !== null &&
            typeof message === "object" &&
            "source" in message &&
            message.source === "civicloginApp");
    }
    /**
     * Handles messages originating from the civicloginApp.
     *
     * Processes various civicloginApp message types including authentication errors,
     * popup failures, design updates, and other app-specific communications.
     * Validates client ID matches before processing.
     *
     * @param message - The validated civicloginApp message to process
     */
    handleCivicLoginAppMessage(message) {
        this.logger.info("Received civicloginApp message", {
            type: message.type,
            clientId: message.clientId,
            data: message.data,
        });
        // Validate clientId matches our config
        if (message.clientId !== this.config.clientId) {
            this.logger.warn("civicloginApp message clientId mismatch", {
                received: message.clientId,
                expected: this.config.clientId,
            });
            return;
        }
        switch (message.type) {
            case "auth_error":
            case "auth_error_try_again":
                this.handleCivicLoginAppError(message);
                break;
            case "generatePopupFailed":
                this.handlePopupFailure(message);
                break;
            case "design":
                this.logger.debug("civicloginApp design message", {
                    data: message.data,
                });
                break;
            default:
                this.handleUnknownCivicLoginAppMessage(message);
                break;
        }
    }
    /**
     * Handles authentication error messages from civicloginApp.
     *
     * Processes auth_error and auth_error_try_again messages, creates
     * appropriate error objects, emits error events, and triggers cleanup.
     *
     * @param message - The civicloginApp error message to process
     */
    handleCivicLoginAppError(message) {
        this.logger.error("civicloginApp authentication error", {
            type: message.type,
            data: message.data,
        });
        const error = new CivicAuthError(`Login app error: ${message.type}`, CivicAuthErrorCode.INVALID_MESSAGE);
        this.config.events?.emit(AuthEvent.SIGN_IN_ERROR, {
            detail: error.message,
            error: message.data,
        });
        this.onAuthError(error);
        this.cleanup();
    }
    /**
     * Handles popup generation failure messages from civicloginApp.
     *
     * Processes generatePopupFailed messages, extracts the failed URL,
     * emits appropriate events, and triggers the popup failure callback
     * to enable fallback authentication methods.
     *
     * @param message - The civicloginApp popup failure message to process
     */
    handlePopupFailure(message) {
        this.logger.warn("civicloginApp popup generation failed", {
            data: message.data,
        });
        const failedUrl = message.data
            ?.url;
        if (failedUrl) {
            this.logger.info("Popup failed for URL, considering fallback options", {
                failedUrl,
                displayMode: this.config.displayMode,
            });
            this.config.events?.emit(AuthEvent.SIGN_IN_ERROR, {
                detail: "Popup blocked by browser - switching to redirect mode",
                error: {
                    type: "popup_blocked",
                    failedUrl,
                    suggestion: "The browser blocked a popup window. Redirecting to complete authentication in a new page.",
                },
            });
        }
        this.onPopupFailure(failedUrl);
    }
    /**
     * Handles unknown or unrecognized civicloginApp message types.
     *
     * Provides fallback handling for unexpected message types, with special
     * logic to detect potential success messages that don't match standard types.
     *
     * @param message - The unrecognized civicloginApp message to process
     */
    handleUnknownCivicLoginAppMessage(message) {
        this.logger.debug("Unhandled civicloginApp message type", {
            type: message.type,
            data: message.data,
        });
        // Check if this might be a success message with a different type
        if (message.type && message.type.toLowerCase().includes("success")) {
            this.logger.info("Potential success message from civicloginApp", {
                type: message.type,
                data: message.data,
            });
            this.handleAuthSuccess({
                type: "auth_success",
                detail: `civicloginApp success: ${message.type}`,
                data: message.data,
            });
        }
    }
    /**
     * Type guard to identify iframe resizer messages.
     *
     * Checks if a message is related to iframe resizing functionality,
     * including both civic-specific resize messages and iFrameResizerChild messages.
     *
     * @param message - The message object to check
     * @returns True if the message is an iframe resizer message, false otherwise
     */
    isIframeResizerMessage(message) {
        return ((message !== null &&
            typeof message === "object" &&
            "type" in message &&
            (message.type === "civic-iframe-resize" ||
                message.type ===
                    "civic-iframe-ready")) ||
            (typeof message === "string" && message.includes("iFrameResizerChild")));
    }
    /**
     * Handles iframe resizer messages for dynamic iframe sizing.
     *
     * Processes messages related to iframe resizing, including height adjustments
     * and ready state notifications from the iframe resizer library.
     *
     * @param message - The iframe resizer message to process
     */
    handleIframeResizerMessage(message) {
        if (typeof message === "string") {
            this.logger.debug("Received iframe resizer child message", { message });
        }
        else if (message && typeof message === "object" && message !== null) {
            const messageObj = message;
            this.logger.debug("Received iframe resizer message", {
                type: messageObj.type,
                height: messageObj.height,
            });
        }
    }
    /**
     * Handles standard authentication messages.
     *
     * Processes auth_success and auth_error messages that follow the standard
     * authentication message format, routing them to appropriate success or error handlers.
     *
     * @param message - The standard auth message to process
     */
    handleStandardAuthMessage(message) {
        const messageObj = message && typeof message === "object" && message !== null
            ? message
            : null;
        const messageType = messageObj?.type;
        switch (messageType) {
            case "auth_success":
                this.handleAuthSuccess(message);
                break;
            case "auth_error":
                this.handleAuthError(message);
                break;
            default:
                this.logger.debug("Message from iframe did not match expected types (auth_success, auth_error, civicloginApp, iframe-resizer)", {
                    data: message,
                    messageType: typeof message,
                    hasType: messageObj?.type ?? "none",
                });
        }
    }
    /**
     * Handles successful authentication completion.
     *
     * Processes authentication success messages, emits success events,
     * triggers the success callback with authentication results, and performs cleanup.
     *
     * @param data - The authentication success message containing result data
     */
    handleAuthSuccess(data) {
        this.config.events?.emit(AuthEvent.SIGN_IN_COMPLETE, {
            detail: "Success signal received via postMessage",
            data,
        });
        this.onAuthSuccess(data?.data || {});
        this.cleanup();
    }
    /**
     * Handles authentication errors.
     *
     * Processes authentication error messages, creates appropriate error objects,
     * emits error events, triggers the error callback, and performs cleanup.
     *
     * @param data - The authentication error message containing error details
     */
    handleAuthError(data) {
        this.config.events?.emit(AuthEvent.SIGN_IN_ERROR, {
            detail: "Error signal received via postMessage",
            error: data,
        });
        const error = new CivicAuthError(data?.detail || "Error signal received via postMessage", CivicAuthErrorCode.INVALID_MESSAGE);
        this.onAuthError(error);
        this.cleanup();
    }
}
//# sourceMappingURL=MessageHandler.js.map
/**
 * OAuth Callback Handler for Vanilla JavaScript Applications
 *
 * This module provides functionality for handling OAuth redirect/callback pages in vanilla JavaScript
 * applications using the Civic Auth system. It processes the OAuth authorization code flow completion
 * by exchanging authorization codes for access tokens and managing the authentication state.
 *
 * Key responsibilities:
 * - Process OAuth callback URL parameters (code, state)
 * - Exchange authorization codes for access tokens using PKCE
 * - Store tokens and user session data using shared utilities
 * - Create DOM signals for iframe-based authentication flows
 * - Handle error states and cleanup during the OAuth flow
 *
 * This module works in conjunction with:
 * - CivicAuth class for initiating OAuth flows
 * - SignalObserver for detecting authentication completion in iframes
 * - Shared token storage utilities for consistent state management
 *
 * @example
 * ```javascript
 * // Basic usage
 * const config = {
 *   clientId: 'your-client-id',
 *   redirectUrl: 'https://yourapp.com/callback',
 *   oauthServer: 'https://auth.civic.com/oauth',
 *   scopes: ['openid', 'profile', 'email']
 * };
 * const result = await handleOAuthRedirectPage(config);
 * ```
 */
import { exchangeTokens, buildOauth2Client, getEndpointsWithOverrides, storeTokens as sharedStoreTokens, } from "../../../shared/lib/util.js";
import { getUser } from "../../../shared/lib/session.js";
import { GenericUserSession } from "../../../shared/lib/UserSession.js";
import { CodeVerifier } from "../../../shared/lib/types.js";
import { createLogger } from "../../utils/logger.js";
import { GenericPublicClientPKCEProducer } from "../../../services/PKCE.js";
/**
 * Store tokens using the shared utilities from /shared/lib
 * This ensures consistency with the React implementation and also handles user session storage
 */
export async function storeTokens(tokens, storageAdapter, loggerInstance = createLogger("oauth-callback")) {
    try {
        // Use shared storeTokens utility for consistent token storage
        await sharedStoreTokens(storageAdapter, tokens);
        // Get user info using shared utilities
        const user = await getUser(storageAdapter);
        if (user) {
            // Store user session using shared utilities
            const userSession = new GenericUserSession(storageAdapter);
            await userSession.set(user);
            loggerInstance.info("CivicAuth: Tokens and user info stored successfully using shared utilities.");
            return user;
        }
        else {
            loggerInstance.warn("CivicAuth: Failed to extract user info from tokens.");
            return null;
        }
    }
    catch (error) {
        loggerInstance.error("CivicAuth: Error storing tokens:", error);
        throw error;
    }
}
/**
 * Handle OAuth redirect page processing for vanilla JavaScript applications.
 * This function processes the OAuth callback URL parameters and exchanges the authorization code for tokens.
 *
 * @param config - Configuration object for handling the OAuth redirect
 * @param config.clientId - OAuth client ID
 * @param config.redirectUrl - URL to redirect to after authentication
 * @param config.oauthServer - OAuth server base URL
 * @param config.textSignals - Text signals for success and error states
 * @param config.storageAdapter - Storage adapter for persisting auth state (required)
 * @param config.logger - Optional logger instance
 * @returns Promise<boolean> - Returns true if callback was handled, false otherwise
 *
 * @example
 * ```javascript
 * // Using storeTokens with default iframe mode
 * const config = {
 *   clientId: 'your-client-id',
 *   redirectUrl: 'https://yourapp.com/callback',
 *   oauthServer: 'https://auth.civic.com/oauth',
 *   scopes: ['openid', 'profile', 'email']
 * };
 * await storeTokens(params, config);
 * ```
 */
export async function handleOAuthRedirectPage(config) {
    const loggerInstance = config.logger || createLogger("oauth-callback");
    const urlParams = new URLSearchParams(window.location.search);
    const code = urlParams.get("code");
    const state = urlParams.get("state");
    const error = urlParams.get("error");
    // Check if we're in a popup window
    const isPopup = window.opener && window.opener !== window;
    loggerInstance.info("CivicAuth: Callback page context", {
        isPopup,
        hasOpener: !!window.opener,
        hasCode: !!code,
        hasError: !!error,
        currentUrl: window.location.href,
    });
    if (error) {
        loggerInstance.error("CivicAuth: OAuth error in callback", { error });
        // Create error signal for iframe mode
        const errorSignalElement = document.createElement("div");
        errorSignalElement.id = "civic-auth-error-signal";
        errorSignalElement.textContent = `${config.textSignals.error} (Error: ${error})`;
        errorSignalElement.style.display = "none";
        document.body.appendChild(errorSignalElement);
        // Send postMessage for popup mode
        if (isPopup && window.opener) {
            loggerInstance.info("CivicAuth: Sending error message to parent window", {
                hasOpener: !!window.opener,
                openerOrigin: window.opener.origin || "unknown",
                currentUrl: window.location.href,
                messageData: {
                    type: "auth_error",
                    detail: `OAuth error: ${error}`,
                    error: error,
                },
            });
            try {
                window.opener.postMessage({
                    type: "auth_error",
                    detail: `OAuth error: ${error}`,
                    error: error,
                }, "*");
                loggerInstance.info("CivicAuth: Error postMessage sent successfully");
            }
            catch (postMessageError) {
                loggerInstance.error("CivicAuth: Failed to send error postMessage", {
                    error: postMessageError,
                });
            }
            // Close popup after a short delay
            setTimeout(() => {
                loggerInstance.info("CivicAuth: Closing popup window");
                try {
                    window.close();
                }
                catch (closeError) {
                    loggerInstance.warn("CivicAuth: Failed to close popup window", {
                        error: closeError,
                    });
                }
            }, 1000);
        }
        else {
            loggerInstance.debug("CivicAuth: Not in popup mode or no opener", {
                isPopup,
                hasOpener: !!window.opener,
            });
        }
        return true;
    }
    if (code && state) {
        loggerInstance.info("CivicAuth: OAuth callback detected with code:", code);
        // Use the provided storage adapter from config
        const storage = config.storageAdapter;
        const pkceProducer = new GenericPublicClientPKCEProducer(storage);
        try {
            const endpoints = await getEndpointsWithOverrides(config.oauthServer);
            const oauth2Client = buildOauth2Client(config.clientId, config.redirectUrl, endpoints);
            const tokenResponse = await exchangeTokens(code, state, pkceProducer, oauth2Client, config.oauthServer, endpoints);
            // Get userInfo from storeTokens using shared utilities
            const userInfo = await storeTokens(tokenResponse, storage, loggerInstance);
            loggerInstance.info("CivicAuth: Tokens stored successfully using shared utilities.");
            // Create success signal for iframe mode
            const signalElement = document.createElement("div");
            signalElement.id = "civic-auth-success-signal";
            signalElement.textContent = config.textSignals.success;
            if (userInfo) {
                // Embed userInfo if available
                signalElement.setAttribute("data-user-info", JSON.stringify(userInfo));
            }
            signalElement.style.display = "none";
            document.body.appendChild(signalElement);
            loggerInstance.info("CivicAuth: Appended success signal to body.");
            // Send postMessage for popup mode
            if (isPopup && window.opener) {
                loggerInstance.info("CivicAuth: Sending success message to parent window", {
                    hasOpener: !!window.opener,
                    openerOrigin: window.opener.origin || "unknown",
                    currentUrl: window.location.href,
                    messageData: {
                        type: "auth_success",
                        detail: "Authentication successful",
                        hasUser: !!userInfo,
                        hasTokens: !!tokenResponse,
                    },
                });
                try {
                    window.opener.postMessage({
                        type: "auth_success",
                        detail: "Authentication successful",
                        data: {
                            user: userInfo,
                            tokens: tokenResponse,
                        },
                    }, "*");
                    loggerInstance.info("CivicAuth: Success postMessage sent successfully");
                }
                catch (postMessageError) {
                    loggerInstance.error("CivicAuth: Failed to send success postMessage", {
                        error: postMessageError,
                    });
                }
                // Close popup after a short delay
                setTimeout(() => {
                    loggerInstance.info("CivicAuth: Closing popup window");
                    try {
                        window.close();
                    }
                    catch (closeError) {
                        loggerInstance.warn("CivicAuth: Failed to close popup window", {
                            error: closeError,
                        });
                    }
                }, 1000);
            }
            else {
                loggerInstance.debug("CivicAuth: Not in popup mode or no opener", {
                    isPopup,
                    hasOpener: !!window.opener,
                });
            }
            // Clean up the code verifier using shared utilities
            await storage.delete(CodeVerifier.COOKIE_NAME);
        }
        catch (error) {
            loggerInstance.error("CivicAuth: Token exchange error:", error);
            // Create error signal for iframe mode
            const errorSignalElement = document.createElement("div");
            errorSignalElement.id = "civic-auth-error-signal";
            const errorMessage = error instanceof Error ? error.message : "Unknown error";
            errorSignalElement.textContent = `${config.textSignals.error} (Error: ${errorMessage})`;
            errorSignalElement.style.display = "none";
            document.body.appendChild(errorSignalElement);
            // Send postMessage for popup mode
            if (isPopup && window.opener) {
                loggerInstance.info("CivicAuth: Sending error message to parent window", {
                    hasOpener: !!window.opener,
                    openerOrigin: window.opener.origin || "unknown",
                    currentUrl: window.location.href,
                    messageData: {
                        type: "auth_error",
                        detail: `Token exchange error: ${errorMessage}`,
                        error: errorMessage,
                    },
                });
                try {
                    window.opener.postMessage({
                        type: "auth_error",
                        detail: `Token exchange error: ${errorMessage}`,
                        error: errorMessage,
                    }, "*");
                    loggerInstance.info("CivicAuth: Error postMessage sent successfully");
                }
                catch (postMessageError) {
                    loggerInstance.error("CivicAuth: Failed to send error postMessage", {
                        error: postMessageError,
                    });
                }
                // Close popup after a short delay
                setTimeout(() => {
                    loggerInstance.info("CivicAuth: Closing popup window");
                    try {
                        window.close();
                    }
                    catch (closeError) {
                        loggerInstance.warn("CivicAuth: Failed to close popup window", {
                            error: closeError,
                        });
                    }
                }, 1000);
            }
            else {
                loggerInstance.debug("CivicAuth: Not in popup mode or no opener", {
                    isPopup,
                    hasOpener: !!window.opener,
                });
            }
            return true;
        }
        return true;
    }
    return false;
}
//# sourceMappingURL=OAuthCallbackHandler.js.map
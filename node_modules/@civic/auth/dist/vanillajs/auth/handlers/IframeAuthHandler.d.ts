import type { AuthResult } from "../../types/index.js";
import type { ProcessedCivicAuthConfig } from "../types/AuthTypes.js";
import { IframeManager } from "../../iframe/IframeManager.js";
import type { createLogger } from "../../utils/logger.js";
export interface IframeAuthHandlerConfig {
    config: ProcessedCivicAuthConfig;
    logger: ReturnType<typeof createLogger>;
    onAuthSuccess: (result: AuthResult) => void;
    onAuthError: (error: Error) => void;
    cleanup: () => void;
    messageHandler: (event: MessageEvent) => void;
}
export declare class IframeAuthHandler {
    private config;
    private logger;
    private onAuthSuccess;
    private onAuthError;
    private cleanup;
    private messageHandler;
    private iframeManager?;
    private iframeElement?;
    private signalObserver?;
    constructor(handlerConfig: IframeAuthHandlerConfig);
    handleIframeAuth(fullAuthUrl: string): Promise<HTMLIFrameElement>;
    getIframeManager(): IframeManager | undefined;
    getIframeElement(): HTMLIFrameElement | undefined;
    cleanupIframe(): void;
    private cleanupDynamicModalContainer;
    private createModalContainer;
    private getContainerElement;
    private determineIframeDisplayMode;
    private setupIframeEventHandlers;
    private checkAndHideNonLoginContent;
    private checkIframeRedirect;
    private setupSignalObserver;
    private setupIframeNavigationMonitoring;
    private processCallbackUrl;
    navigateIframe(url: string): void;
}
//# sourceMappingURL=IframeAuthHandler.d.ts.map
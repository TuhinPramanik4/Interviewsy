import type { AuthStorage } from "../../types.js";
import type { AuthenticationEvents } from "./AuthenticationEvents.js";
import type { User, Session } from "../types/index.js";
import type { AuthConfig } from "../../server/config.js";
export declare class SessionManager {
    private storage;
    private events;
    private tokenRefresher?;
    private logger;
    constructor(storageAdapter: AuthStorage, events: AuthenticationEvents);
    /**
     * Initialize the session manager with auth configuration to enable token refresh
     */
    initializeWithAuthConfig(authConfig: AuthConfig): Promise<void>;
    /**
     * Build current session from shared lib storage
     */
    getCurrentSession(): Promise<Session | null>;
    /**
     * Check if user is authenticated using shared lib utilities
     */
    isAuthenticated(): Promise<boolean>;
    /**
     * Get current user from shared lib storage
     */
    getCurrentUser(): Promise<User | null>;
    /**
     * Clear all authentication data using shared lib utilities
     * @param preserveLogoutState - If true, preserves logout state for cleanup after redirect
     */
    clearSession(preserveLogoutState?: boolean): Promise<void>;
    /**
     * Clear tokens from storage except logout state
     * This is needed during logout to preserve the logout state for cleanup after redirect
     */
    private clearTokensExceptLogoutState;
    /**
     * Manually trigger token refresh
     */
    refreshTokens(): Promise<void>;
    /**
     * Get token refresher state for debugging
     */
    getTokenRefresherState(): {
        isInitialized: boolean;
        isAuthenticated: boolean;
        isAutoRefreshActive: boolean;
    } | null;
    /**
     * Clean up resources when session manager is destroyed
     */
    destroy(): Promise<void>;
}
//# sourceMappingURL=SessionManager.d.ts.map
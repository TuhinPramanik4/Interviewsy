{"version":3,"file":"ConfigProcessor.js","sourceRoot":"","sources":["../../../../src/vanillajs/auth/config/ConfigProcessor.ts"],"names":[],"mappings":"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","sourcesContent":["import { LocalStorageAdapter } from \"../../../browser/storage.js\";\nimport { DEFAULT_SCOPES, DEFAULT_AUTH_SERVER } from \"../../../constants.js\";\nimport type { DisplayMode } from \"../../../types.js\";\nimport type {\n  CivicAuthClientConfig,\n  ProcessedCivicAuthConfig,\n  LoggingConfig,\n} from \"../types/AuthTypes.js\";\nimport {\n  CivicAuthError,\n  CivicAuthErrorCode,\n  CIVIC_AUTH_CONSTANTS,\n} from \"../types/AuthTypes.js\";\n\n/**\n * Process the configuration with defaults and validation\n */\nexport function processConfigWithDefaults(\n  config: CivicAuthClientConfig,\n): ProcessedCivicAuthConfig {\n  // Validate required configuration\n  validateRequiredConfig(config);\n\n  const loggingConfig: LoggingConfig = {\n    enabled: false,\n    namespace: \"*\",\n    level: \"debug\" as const,\n    ...config.logging,\n  };\n\n  // Handle displayMode proxy: map \"embedded\" to \"iframe\" + iframeDisplayMode: \"embedded\"\n  // the original displaymode doesn't suppors embedded, so we need to proxy it to iframe + iframeDisplayMode: \"embedded\"\n  const originalDisplayMode = config.displayMode || \"iframe\";\n  const processedDisplayMode: DisplayMode =\n    originalDisplayMode === \"embedded\" ? \"iframe\" : originalDisplayMode;\n\n  const processedIframeDisplayMode =\n    originalDisplayMode === \"embedded\" ? \"embedded\" : config.iframeDisplayMode;\n\n  // Process redirectUrl - default to current page without query parameters\n  const redirectUrl =\n    config.redirectUrl ||\n    `${window.location.origin}${window.location.pathname}`;\n\n  // Process logoutRedirectUrl - default to redirectUrl if not provided (same behavior as reactjs implementation)\n  const logoutRedirectUrl = config.logoutRedirectUrl || redirectUrl;\n\n  return {\n    ...config,\n    redirectUrl,\n    logoutRedirectUrl,\n    oauthServerBaseUrl: config.oauthServerBaseUrl || DEFAULT_AUTH_SERVER,\n    scopes: config.scopes || DEFAULT_SCOPES,\n    textSignals: config.textSignals || {\n      success: \"Authentication successful!\",\n      error: \"Authentication failed. Please try again.\",\n    },\n    displayMode: processedDisplayMode,\n    iframeDisplayMode: processedIframeDisplayMode,\n    authProcessTimeout:\n      config.authProcessTimeout ||\n      CIVIC_AUTH_CONSTANTS.DEFAULT_AUTH_PROCESS_TIMEOUT,\n    iframeId: config.iframeId || CIVIC_AUTH_CONSTANTS.DEFAULT_IFRAME_ID,\n    prompt: \"consent\",\n    logging: loggingConfig,\n    storageAdapter: config.storageAdapter || new LocalStorageAdapter(),\n  };\n}\n\n/**\n * Validates required configuration properties\n */\nfunction validateRequiredConfig(config: CivicAuthClientConfig): void {\n  // Always required configurations\n  const requiredConfigs = [{ key: \"clientId\", value: config.clientId }];\n\n  // Validate always-required fields\n  for (const { key, value } of requiredConfigs) {\n    if (!value) {\n      throw new CivicAuthError(\n        `CivicAuth: ${key} is required.`,\n        CivicAuthErrorCode.CONFIG_REQUIRED,\n      );\n    }\n  }\n\n  // Conditional validation for targetContainerElement\n  // Handle both the new \"embedded\" displayMode and the legacy iframe + iframeDisplayMode approach\n  const displayMode = config.displayMode || \"iframe\";\n  const iframeDisplayMode = config.iframeDisplayMode;\n\n  // Check if we need a container element\n  const needsContainer =\n    displayMode === \"embedded\" || // New simplified API\n    (displayMode === \"iframe\" && iframeDisplayMode === \"embedded\"); // Legacy API\n\n  if (needsContainer && !config.targetContainerElement) {\n    throw new CivicAuthError(\n      \"CivicAuth: targetContainerElement is required for embedded iframe mode. \" +\n        \"You can use displayMode: 'embedded' for a simplified API, \" +\n        \"or use displayMode: 'iframe' with iframeDisplayMode: 'embedded'. \" +\n        \"For modal iframe mode, use displayMode: 'iframe' (default). \" +\n        \"For non-iframe modes, use displayMode 'redirect' or 'new_tab'.\",\n      CivicAuthErrorCode.CONFIG_REQUIRED,\n    );\n  }\n}\n"]}
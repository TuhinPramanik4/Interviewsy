import { LocalStorageAdapter } from "../../../browser/storage.js";
import { DEFAULT_SCOPES, DEFAULT_AUTH_SERVER } from "../../../constants.js";
import { CivicAuthError, CivicAuthErrorCode, CIVIC_AUTH_CONSTANTS, } from "../types/AuthTypes.js";
/**
 * Process the configuration with defaults and validation
 */
export function processConfigWithDefaults(config) {
    // Validate required configuration
    validateRequiredConfig(config);
    const loggingConfig = {
        enabled: false,
        namespace: "*",
        level: "debug",
        ...config.logging,
    };
    // Handle displayMode proxy: map "embedded" to "iframe" + iframeDisplayMode: "embedded"
    // the original displaymode doesn't suppors embedded, so we need to proxy it to iframe + iframeDisplayMode: "embedded"
    const originalDisplayMode = config.displayMode || "iframe";
    const processedDisplayMode = originalDisplayMode === "embedded" ? "iframe" : originalDisplayMode;
    const processedIframeDisplayMode = originalDisplayMode === "embedded" ? "embedded" : config.iframeDisplayMode;
    // Process redirectUrl - default to current page without query parameters
    const redirectUrl = config.redirectUrl ||
        `${window.location.origin}${window.location.pathname}`;
    // Process logoutRedirectUrl - default to redirectUrl if not provided (same behavior as reactjs implementation)
    const logoutRedirectUrl = config.logoutRedirectUrl || redirectUrl;
    return {
        ...config,
        redirectUrl,
        logoutRedirectUrl,
        oauthServerBaseUrl: config.oauthServerBaseUrl || DEFAULT_AUTH_SERVER,
        scopes: config.scopes || DEFAULT_SCOPES,
        textSignals: config.textSignals || {
            success: "Authentication successful!",
            error: "Authentication failed. Please try again.",
        },
        displayMode: processedDisplayMode,
        iframeDisplayMode: processedIframeDisplayMode,
        authProcessTimeout: config.authProcessTimeout ||
            CIVIC_AUTH_CONSTANTS.DEFAULT_AUTH_PROCESS_TIMEOUT,
        iframeId: config.iframeId || CIVIC_AUTH_CONSTANTS.DEFAULT_IFRAME_ID,
        prompt: "consent",
        logging: loggingConfig,
        storageAdapter: config.storageAdapter || new LocalStorageAdapter(),
    };
}
/**
 * Validates required configuration properties
 */
function validateRequiredConfig(config) {
    // Always required configurations
    const requiredConfigs = [{ key: "clientId", value: config.clientId }];
    // Validate always-required fields
    for (const { key, value } of requiredConfigs) {
        if (!value) {
            throw new CivicAuthError(`CivicAuth: ${key} is required.`, CivicAuthErrorCode.CONFIG_REQUIRED);
        }
    }
    // Conditional validation for targetContainerElement
    // Handle both the new "embedded" displayMode and the legacy iframe + iframeDisplayMode approach
    const displayMode = config.displayMode || "iframe";
    const iframeDisplayMode = config.iframeDisplayMode;
    // Check if we need a container element
    const needsContainer = displayMode === "embedded" || // New simplified API
        (displayMode === "iframe" && iframeDisplayMode === "embedded"); // Legacy API
    if (needsContainer && !config.targetContainerElement) {
        throw new CivicAuthError("CivicAuth: targetContainerElement is required for embedded iframe mode. " +
            "You can use displayMode: 'embedded' for a simplified API, " +
            "or use displayMode: 'iframe' with iframeDisplayMode: 'embedded'. " +
            "For modal iframe mode, use displayMode: 'iframe' (default). " +
            "For non-iframe modes, use displayMode 'redirect' or 'new_tab'.", CivicAuthErrorCode.CONFIG_REQUIRED);
    }
}
//# sourceMappingURL=ConfigProcessor.js.map
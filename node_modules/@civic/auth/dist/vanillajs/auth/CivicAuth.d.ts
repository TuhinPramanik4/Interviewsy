import type { AuthResult, Session } from "../types/index.js";
import type { CivicAuthClientConfig } from "./types/AuthTypes.js";
/**
 * CivicAuth client for handling OAuth authentication
 *
 * This is a refactored version that uses a modular architecture for better maintainability.
 */
export declare class CivicAuth {
    private config;
    private storage;
    private endpoints?;
    private logger;
    private sessionManager;
    private events;
    private initialDisplayMode;
    private authPromise?;
    private authPromiseResolve?;
    private authPromiseReject?;
    private authProcessTimeoutHandle?;
    private popupFailureTimeoutHandle?;
    private hasPopupFailed;
    private messageHandler?;
    private popupHandler?;
    private iframeAuthHandler?;
    /**
     * Private constructor - initializes configuration and handlers.
     * Use {@link CivicAuth.create} to create a new instance.
     */
    private constructor();
    /**
     * Creates and initializes a new instance of CivicAuth.
     * This is the recommended way to create a CivicAuth instance.
     *
     * @param config - Configuration options for the auth client
     * @returns A promise that resolves with the initialized CivicAuth instance
     * @throws {CivicAuthError} If initialization fails or required configuration is missing
     *
     * @example
     * ```typescript
     * const auth = await CivicAuth.create({
     *   clientId: "your-client-id",
     *   // redirectUrl is optional - defaults to current page (window.location.origin + window.location.pathname)
     *   redirectUrl: "https://your-app.com/callback", // optional
     *   // logoutRedirectUrl is optional - defaults to redirectUrl if not provided
     *   logoutRedirectUrl: "https://your-app.com/logout", // optional
     *   // oauthServerBaseUrl is optional - defaults to "https://auth.civic.com/oauth"
     *   oauthServerBaseUrl: "https://auth-server.com/", // optional
     *   // scopes is optional - defaults to ['openid', 'profile', 'email', 'offline_access']
     *   scopes: ["openid", "profile"], // optional
     *   targetContainerElement: "auth-container",
     *   textSignals: {
     *     success: "Authentication successful!"
     *   }
     * });
     * ```
     */
    static create(config: CivicAuthClientConfig): Promise<CivicAuth>;
    /**
     * Initializes the auth client and checks for callback handling
     */
    private init;
    /**
     * Initialize all handlers with proper configuration
     */
    private initializeHandlers;
    /**
     * Builds the authentication URL with PKCE challenge
     */
    private buildAuthUrl;
    /**
     * Starts the authentication process
     * @returns A promise that resolves with the authentication result
     * @throws {CivicAuthError} If authentication fails or times out
     */
    startAuthentication(): Promise<AuthResult>;
    /**
     * Handle authentication based on display mode
     */
    private handleAuthenticationByDisplayMode;
    /**
     * Handle popup error with redirect fallback
     */
    private handlePopupErrorWithFallback;
    /**
     * Setup authentication timeout
     */
    private setupAuthenticationTimeout;
    /**
     * Handle successful authentication
     */
    private handleAuthSuccess;
    /**
     * Handle authentication error
     */
    private handleAuthError;
    /**
     * Handle popup failure - simplified like React implementation
     */
    private handlePopupFailure;
    /**
     * Show popup failure message to user
     */
    private showPopupFailureMessage;
    /**
     * Setup popup failure timeout
     */
    private setupPopupFailureTimeout;
    /**
     * Gets the container element for the auth iframe
     */
    private getContainerElement;
    /**
     * Handle OAuth callback
     */
    private handleCallback;
    /**
     * Cleans up resources and event listeners
     */
    cleanup(): void;
    /**
     * Get the current session
     */
    getCurrentSession(): Promise<Session | null>;
    /**
     * Get current session tokens including decoded forwarded tokens
     * This method extracts and decodes forwarded tokens from the ID token JWT
     */
    getTokensWithForwardedTokens(): Promise<import("../utils/auth-utils.js").ExtractedTokens>;
    /**
     * Check if user is authenticated
     */
    isAuthenticated(): Promise<boolean>;
    /**
     * Get the current user
     */
    getCurrentUser(): Promise<import("../../types.js").BaseUser | null>;
    /**
     * Clear the current session
     */
    clearSession(): Promise<void>;
    /**
     * Manually refresh tokens
     */
    refreshTokens(): Promise<void>;
    /**
     * Get token refresher state for debugging
     */
    getTokenRefresherState(): {
        isInitialized: boolean;
        isAuthenticated: boolean;
        isAutoRefreshActive: boolean;
    } | null;
    /**
     * Update the iframe display mode
     * @param mode - The display mode to use for the iframe
     */
    setIframeDisplayMode(mode: "modal" | "embedded"): void;
    /**
     * Get the current iframe display mode
     * @returns The current iframe display mode
     */
    getIframeDisplayMode(): "modal" | "embedded" | undefined;
    /**
     * Destroy the auth client and clean up all resources
     */
    destroy(): Promise<void>;
    /**
     * Handle logout
     */
    logout(): Promise<void>;
    /**
     * Handle logout state cleanup
     * This mirrors the logic from useSignIn.ts to properly clean up after logout
     */
    private handleLogoutStateCleanup;
}
export type { CivicAuthClientConfig } from "./types/AuthTypes.js";
export { CivicAuthErrorCode } from "./types/AuthTypes.js";
//# sourceMappingURL=CivicAuth.d.ts.map
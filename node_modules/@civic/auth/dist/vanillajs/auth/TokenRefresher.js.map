{"version":3,"file":"TokenRefresher.js","sourceRoot":"","sources":["../../../src/vanillajs/auth/TokenRefresher.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AuthStorage } from \"../../types.js\";\nimport type { AuthenticationEvents } from \"./AuthenticationEvents.js\";\nimport { AuthEvent } from \"../types/index.js\";\nimport {\n  BrowserAuthenticationRefresher,\n  type RefreshEventCallbacks,\n} from \"../../shared/lib/BrowserAuthenticationRefresher.js\";\nimport type { AuthConfig } from \"../../server/config.js\";\nimport { createLogger } from \"../utils/logger.js\";\nimport { retrieveOidcSessionExpiredAt } from \"../../shared/lib/util.js\";\n\n/**\n * TokenRefresher handles automatic token refresh for vanilla.js implementation\n * Inspired by the React useRefresh hook and BrowserAuthenticationRefresher\n */\nexport class TokenRefresher {\n  private refresher?: BrowserAuthenticationRefresher;\n  private storage: AuthStorage;\n  private events: AuthenticationEvents;\n  private authConfig?: AuthConfig;\n  private isAuthenticated: boolean = false;\n  private isDestroyed: boolean = false;\n  private logger = createLogger(\"token-refresh\");\n\n  constructor(\n    storage: AuthStorage,\n    events: AuthenticationEvents,\n    authConfig?: AuthConfig,\n  ) {\n    this.storage = storage;\n    this.events = events;\n    this.authConfig = authConfig;\n\n    this.logger.info(\"TokenRefresher initialized\");\n  }\n\n  /**\n   * Initialize the token refresher with auth configuration\n   */\n  async initialize(authConfig: AuthConfig): Promise<void> {\n    if (this.isDestroyed) return;\n\n    this.authConfig = authConfig;\n\n    try {\n      // Clear any existing refresher\n      await this.cleanup();\n\n      const onError = async (error: Error) => {\n        this.logger.error(\"Token refresh error:\", error);\n        this.events.emit(AuthEvent.TOKEN_REFRESH_ERROR, error);\n\n        // Clear auto-refresh on error\n        this.refresher?.clearAutorefresh();\n\n        // Optionally sign out the user on refresh token errors\n        // This mirrors the React implementation behavior\n        this.events.emit(AuthEvent.SIGN_OUT_STARTED, null);\n      };\n\n      // Create callbacks for refresh events\n      const refreshEventCallbacks: RefreshEventCallbacks = {\n        onRefreshStarted: () => {\n          this.logger.info(\"Auto token refresh started\");\n          this.events.emit(AuthEvent.TOKEN_REFRESH_STARTED, null);\n        },\n        onRefreshComplete: () => {\n          this.logger.info(\"Auto token refresh completed\");\n          this.events.emit(AuthEvent.TOKEN_REFRESH_COMPLETE, null);\n        },\n        onRefreshError: (error: Error) => {\n          this.logger.error(\"Auto token refresh failed:\", error);\n          this.events.emit(AuthEvent.TOKEN_REFRESH_ERROR, error);\n        },\n      };\n\n      this.refresher = await BrowserAuthenticationRefresher.build(\n        authConfig,\n        this.storage,\n        onError,\n        undefined, // endpointOverrides\n        refreshEventCallbacks,\n      );\n\n      this.logger.info(\"TokenRefresher initialized\");\n    } catch (error) {\n      this.logger.error(\"Failed to initialize TokenRefresher:\", error);\n      this.events.emit(AuthEvent.TOKEN_REFRESH_ERROR, error);\n    }\n  }\n\n  /**\n   * Set authentication state and manage auto-refresh accordingly\n   */\n  setAuthenticationState(isAuthenticated: boolean): void {\n    if (this.isDestroyed) return;\n\n    this.isAuthenticated = isAuthenticated;\n\n    if (isAuthenticated && this.refresher) {\n      // Fire and forget the async call - we don't want to make setAuthenticationState async\n      // as it would break the interface\n      this.startAutoRefresh().catch((error) => {\n        this.logger.error(\"Error starting auto refresh:\", error);\n      });\n    } else {\n      this.stopAutoRefresh();\n    }\n  }\n\n  /**\n   * Manually refresh tokens\n   */\n  async refreshTokens(): Promise<void> {\n    if (this.isDestroyed || !this.refresher) {\n      const errorMsg = `TokenRefresher not initialized or destroyed. isDestroyed: ${this.isDestroyed}, hasRefresher: ${!!this.refresher}`;\n      this.logger.error(errorMsg);\n      throw new Error(errorMsg);\n    }\n\n    try {\n      this.events.emit(AuthEvent.TOKEN_REFRESH_STARTED, null);\n\n      this.logger.info(\"Starting manual token refresh\");\n\n      await this.refresher.refreshTokens();\n\n      this.events.emit(AuthEvent.TOKEN_REFRESH_COMPLETE, null);\n      this.logger.info(\"Manual token refresh completed\");\n    } catch (error) {\n      this.logger.error(\"Manual token refresh failed:\", error);\n      this.events.emit(AuthEvent.TOKEN_REFRESH_ERROR, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Start automatic token refresh\n   */\n  private async startAutoRefresh(): Promise<void> {\n    if (this.refresher && this.isAuthenticated) {\n      this.logger.info(\"Starting automatic token refresh\");\n\n      try {\n        // Calculate when the next refresh will happen (same logic as BrowserAuthenticationRefresher)\n        const now = Math.floor(Date.now() / 1000);\n        const expiresAt =\n          (await retrieveOidcSessionExpiredAt(this.storage)) || now + 60;\n        const bufferTime = 30; // 30 seconds buffer\n        const refreshTime = Math.max(0, expiresAt - bufferTime - now);\n\n        const nextRefreshDate = new Date((now + refreshTime) * 1000);\n        this.logger.info(\n          `Next token refresh scheduled for: ${nextRefreshDate.toISOString()} (in ${refreshTime} seconds)`,\n        );\n      } catch (error) {\n        this.logger.warn(\"Could not calculate next refresh time:\", error);\n      }\n\n      this.refresher.setupAutorefresh();\n    }\n  }\n\n  /**\n   * Stop automatic token refresh\n   */\n  private stopAutoRefresh(): void {\n    if (this.refresher) {\n      this.logger.info(\"Stopping automatic token refresh\");\n      this.refresher.clearAutorefresh();\n    }\n  }\n\n  /**\n   * Clean up resources\n   */\n  async cleanup(): Promise<void> {\n    this.logger.info(\"Cleaning up TokenRefresher\");\n\n    if (this.refresher) {\n      this.refresher.clearAutorefresh();\n      this.refresher = undefined;\n    }\n\n    this.isAuthenticated = false;\n  }\n\n  /**\n   * Destroy the token refresher permanently\n   */\n  async destroy(): Promise<void> {\n    this.isDestroyed = true;\n    await this.cleanup();\n    this.logger.info(\"TokenRefresher destroyed\");\n  }\n\n  /**\n   * Get current refresh state\n   */\n  getState(): {\n    isInitialized: boolean;\n    isAuthenticated: boolean;\n    isAutoRefreshActive: boolean;\n  } {\n    return {\n      isInitialized: !!this.refresher,\n      isAuthenticated: this.isAuthenticated,\n      isAutoRefreshActive: this.isAuthenticated && !!this.refresher,\n    };\n  }\n}\n"]}
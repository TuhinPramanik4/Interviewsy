import { createLogger } from "../utils/logger.js";
export class AuthenticationEvents {
    listeners = new Map();
    logger = createLogger("events");
    on(event, listener) {
        if (!this.listeners.has(event)) {
            this.listeners.set(event, []);
        }
        this.listeners.get(event)?.push(listener);
    }
    off(event, listener) {
        const eventListeners = this.listeners.get(event);
        if (eventListeners) {
            this.listeners.set(event, eventListeners.filter((l) => l !== listener));
        }
    }
    emit(event, payload) {
        this.listeners.get(event)?.forEach((listener) => {
            try {
                listener(payload);
            }
            catch (error) {
                this.logger.error(`Error in event listener for ${event}:`, error);
            }
        });
    }
    removeAllListeners(event) {
        if (event) {
            this.listeners.delete(event);
        }
        else {
            this.listeners.clear();
        }
    }
}
//# sourceMappingURL=AuthenticationEvents.js.map
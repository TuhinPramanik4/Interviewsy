/**
 * UI Components for Civic Auth Vanilla JS implementation
 * Converted from React components to vanilla DOM elements
 */
/**
 * Utility function to set multiple styles on an element using a key-value object
 */
function setStyles(element, styles) {
    Object.entries(styles).forEach(([property, value]) => {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any -- CSSStyleDeclaration has read-only properties that prevent proper typing
        element.style[property] = value;
    });
}
/**
 * Utility function to set multiple attributes on an element using a key-value object
 */
function setAttributes(element, attributes) {
    Object.entries(attributes).forEach(([name, value]) => {
        element.setAttribute(name, value);
    });
}
/**
 * Creates a horizontal shimmer loader element (SVG-based)
 * Equivalent to the SVGLoading component from React implementation
 */
export function createShimmerLoader(options = {}) {
    const { backgroundColor = "#ffffff", width = "100%", height = "40px", borderRadius = "0.5rem", } = options;
    // Create container div
    const container = document.createElement("div");
    setStyles(container, {
        position: "absolute",
        top: "-6px",
        left: "0",
        borderRadius,
        backgroundColor,
        width,
        height,
        opacity: "1",
    });
    setAttributes(container, {
        class: "civic-auth-shimmer-loader",
    });
    // Add CSS animation keyframes
    const style = document.createElement("style");
    style.textContent = `
    @keyframes civic-shimmer {
      0% {
        transform: translate(-328px, 0);
      }
      100% {
        transform: translate(328px, 0);
      }
    }
  `;
    // Only add the style if it doesn't already exist
    if (!document.querySelector("style[data-civic-shimmer]")) {
        style.setAttribute("data-civic-shimmer", "true");
        document.head.appendChild(style);
    }
    // Create SVG element
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    setAttributes(svg, {
        "shape-rendering": "geometricPrecision",
        "text-rendering": "geometricPrecision",
        viewBox: "0 0 324 28",
        height: "40",
        width: "100%",
        class: "civic-auth-svg-loading",
    });
    setStyles(svg, {
        position: "absolute",
        top: "-6px",
        left: "0",
        borderRadius,
        backgroundColor,
    });
    // Create gradient definition
    const defs = document.createElementNS("http://www.w3.org/2000/svg", "defs");
    const gradient = document.createElementNS("http://www.w3.org/2000/svg", "linearGradient");
    setAttributes(gradient, {
        id: `civic-shimmer-gradient-${Date.now()}`,
        x2: "320",
        y1: "15",
        y2: "15",
        gradientUnits: "userSpaceOnUse",
    });
    // Create gradient stops
    const stop1 = document.createElementNS("http://www.w3.org/2000/svg", "stop");
    setAttributes(stop1, {
        offset: "0",
        "stop-color": backgroundColor,
    });
    const stop2 = document.createElementNS("http://www.w3.org/2000/svg", "stop");
    setAttributes(stop2, {
        offset: ".511",
        "stop-color": "#9A9DA6",
    });
    const stop3 = document.createElementNS("http://www.w3.org/2000/svg", "stop");
    setAttributes(stop3, {
        offset: "1",
        "stop-color": backgroundColor,
    });
    gradient.appendChild(stop1);
    gradient.appendChild(stop2);
    gradient.appendChild(stop3);
    defs.appendChild(gradient);
    // Create background rectangle
    const rect = document.createElementNS("http://www.w3.org/2000/svg", "path");
    setAttributes(rect, {
        id: "civic-shimmer-rect",
        fill: backgroundColor,
        d: "M0 0h328v28H0z",
    });
    // Create shimmer path
    const shimmer = document.createElementNS("http://www.w3.org/2000/svg", "path");
    setAttributes(shimmer, {
        id: "civic-shimmer-path",
        fill: `url(#${gradient.getAttribute("id")})`,
        d: "M0 -2h328v34H0z",
        transform: "translate(-328)",
    });
    setStyles(shimmer, {
        animation: "1s linear infinite both civic-shimmer",
    });
    // Assemble SVG
    svg.appendChild(defs);
    svg.appendChild(rect);
    svg.appendChild(shimmer);
    // Add SVG to container
    container.appendChild(svg);
    return container;
}
/**
 * Creates a shimmer loader for iframe loading states
 * Positioned to center within an iframe container
 */
export function createIframeShimmerLoader(backgroundColor = "#ffffff", maxWidth) {
    const wrapper = document.createElement("div");
    const wrapperStyles = {
        width: "100%",
        height: "26px",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        position: "absolute",
        top: "50%",
        left: "50%",
        transform: "translate(-50%, -50%)",
        borderRadius: "13px",
        overflow: "hidden",
    };
    // Add max-width if specified
    if (maxWidth) {
        wrapperStyles.maxWidth = maxWidth;
    }
    setStyles(wrapper, wrapperStyles);
    setAttributes(wrapper, {
        "data-testid": "iframe-shimmer-loader",
        class: "civic-auth-iframe-shimmer-wrapper",
    });
    const shimmerLoader = createShimmerLoader({
        backgroundColor,
        width: "100%",
        height: "26px",
        borderRadius: "13px",
    });
    wrapper.appendChild(shimmerLoader);
    return wrapper;
}
/**
 * Creates a simple horizontal skeleton loader (CSS-based alternative)
 * Lighter weight alternative to SVG shimmer
 */
export function createSkeletonLoader(options = {}) {
    const { backgroundColor = "#f0f0f0", width = "100%", height = "20px", borderRadius = "4px", } = options;
    const skeleton = document.createElement("div");
    setStyles(skeleton, {
        width,
        height,
        background: `linear-gradient(90deg, ${backgroundColor} 25%, #e0e0e0 50%, ${backgroundColor} 75%)`,
        backgroundSize: "200% 100%",
        animation: "civic-skeleton-shimmer 1.5s infinite",
        borderRadius,
    });
    setAttributes(skeleton, {
        class: "civic-auth-skeleton-loader",
    });
    // Add CSS animation keyframes for skeleton
    const style = document.createElement("style");
    style.textContent = `
    @keyframes civic-skeleton-shimmer {
      0% { background-position: -200% 0; }
      100% { background-position: 200% 0; }
    }
  `;
    // Only add the style if it doesn't already exist
    if (!document.querySelector("style[data-civic-skeleton]")) {
        style.setAttribute("data-civic-skeleton", "true");
        document.head.appendChild(style);
    }
    return skeleton;
}
/**
 * Creates a button content loader that hides content and shows a skeleton
 * Equivalent to ButtonContentOrLoader from React implementation
 */
export function createButtonContentLoader(content) {
    const container = document.createElement("div");
    setStyles(container, {
        position: "relative",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
    });
    setAttributes(container, {
        class: "civic-auth-button-content-loader",
    });
    // Content span
    const contentSpan = document.createElement("span");
    setStyles(contentSpan, {
        visibility: "visible",
        whiteSpace: "nowrap",
    });
    setAttributes(contentSpan, {
        class: "civic-auth-button-content",
    });
    if (typeof content === "string") {
        contentSpan.textContent = content;
    }
    else {
        contentSpan.appendChild(content);
    }
    // Loader span (hidden by default)
    const loaderSpan = document.createElement("span");
    setStyles(loaderSpan, {
        position: "absolute",
        display: "none",
        justifyContent: "center",
        alignItems: "center",
        top: "0",
        left: "0",
        right: "0",
        bottom: "0",
    });
    setAttributes(loaderSpan, {
        class: "civic-auth-button-loader",
    });
    // Create skeleton loader for button
    const skeletonLoader = createSkeletonLoader({
        width: "70%",
        height: "14px",
        borderRadius: "7px",
    });
    loaderSpan.appendChild(skeletonLoader);
    container.appendChild(contentSpan);
    container.appendChild(loaderSpan);
    return {
        container,
        showLoader: () => {
            contentSpan.style.visibility = "hidden";
            loaderSpan.style.display = "flex";
        },
        hideLoader: () => {
            contentSpan.style.visibility = "visible";
            loaderSpan.style.display = "none";
        },
        setContent: (newContent) => {
            contentSpan.innerHTML = "";
            if (typeof newContent === "string") {
                contentSpan.textContent = newContent;
            }
            else {
                contentSpan.appendChild(newContent);
            }
        },
    };
}
/**
 * Creates a close icon (X) SVG element
 * Equivalent to the CloseIcon component from React implementation
 */
export function createCloseIcon() {
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    setAttributes(svg, {
        xmlns: "http://www.w3.org/2000/svg",
        width: "24",
        height: "24",
        viewBox: "0 0 24 24",
        fill: "none",
        stroke: "currentColor",
        "stroke-width": "2",
        "stroke-linecap": "round",
        "stroke-linejoin": "round",
        class: "lucide lucide-x",
    });
    // Create the X paths
    const path1 = document.createElementNS("http://www.w3.org/2000/svg", "path");
    setAttributes(path1, {
        d: "M18 6 6 18",
    });
    const path2 = document.createElementNS("http://www.w3.org/2000/svg", "path");
    setAttributes(path2, {
        d: "m6 6 12 12",
    });
    svg.appendChild(path1);
    svg.appendChild(path2);
    return svg;
}
/**
 * Creates a close button for modal iframes
 * Positioned absolutely in the top-right corner
 */
export function createCloseButton(onClose) {
    const button = document.createElement("button");
    setStyles(button, {
        position: "absolute",
        right: "0.6rem",
        top: "0.6rem",
        cursor: "pointer",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        border: "none",
        backgroundColor: "transparent",
        padding: "0.25rem",
        color: "#9ca3af",
        zIndex: "100",
        opacity: "0",
        transition: "opacity 50ms ease",
    });
    setAttributes(button, {
        type: "button",
        "aria-label": "Close",
    });
    // Add hover effect
    button.addEventListener("mouseenter", () => {
        button.style.opacity = "0.8";
    });
    button.addEventListener("mouseleave", () => {
        button.style.opacity = "1";
    });
    // Add the close icon
    const closeIcon = createCloseIcon();
    button.appendChild(closeIcon);
    // Add click handler
    button.addEventListener("click", onClose);
    return button;
}
/**
 * Utility function to remove all civic auth loading styles from the document
 * Useful for cleanup
 */
export function cleanupLoadingStyles() {
    const shimmerStyle = document.querySelector("style[data-civic-shimmer]");
    const skeletonStyle = document.querySelector("style[data-civic-skeleton]");
    if (shimmerStyle) {
        shimmerStyle.remove();
    }
    if (skeletonStyle) {
        skeletonStyle.remove();
    }
}
//# sourceMappingURL=LoadingComponents.js.map